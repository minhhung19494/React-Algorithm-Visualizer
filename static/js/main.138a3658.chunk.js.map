{"version":3,"sources":["pathFinding/GridAndNode/Node.js","algorithms/DijkstraAlgo.js","pathFinding/Dijkstra/DijkstraVisualizer.js","algorithms/DFSAlgo.js","pathFinding/Depth First Search/DFSVisualizer.js","algorithms/BFSAlgo.js","pathFinding/Breadth First Search/BFSVisualizer.js","algorithms/AstarAlgo.js","pathFinding/A star/AStarVisualizer.js","algorithms/GreadyAlgo.js","pathFinding/Gready Best First Search/GreadyBFS.js","algorithms/SwarmAlgo.js","pathFinding/Swarm/SwarmVisualizer.js","Maze/RecursiveDivision.js","pathFinding/GridAndNode/Grid.js","pathFinding/PathFinding.js","SortingVisualize/Algorithm/MergeSort.js","SortingVisualize/Algorithm/QuickSort.js","SortingVisualize/Algorithm/HeapSort.js","SortingVisualize/SortingVisualizer.js","SortingVisualize/Algorithm/BubbleSort.js","SortingVisualize/Algorithm/SelectionSort.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","row","col","this","isStart","isFinish","isWall","onMouseEnter","onMouseLeave","onMouseUp","onMouseDown","isVisited","isWeight","extraClassName","className","id","Component","dijskstra","grid","startNode","finishNode","visitedNodeInOrder","unvisistedNode","allNodes","node","push","getAllNodes","distance","length","sortNodeByDistance","closetNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","neighborNodes","neighbors","filter","neighbor","getNeighborNodes","previousNode","visualizeDijkstra","speed","StartNode","FinishNode","NodesinShortestPathOrder","i","setTimeout","console","log","document","getElementById","animateShortestPath","animateDijkstra","nodeInShortestPath","currentNode","unshift","getNodesinShortestPathOrder","DFS","nodeVisited","DFSAlgo","DFSVisualizer","animateNodeInShortestPath","animateDFS","findShortestPath","updateNeighbors","unvisistedNeighbors","getUnvisitedNeighbors","finalNeighbors","visualizeBFS","animateBFS","unvisitedNodeQueue","concat","BFSAlgo","AStarAlgo","unvisitedNode","heuristicDistance","calculateHeuristic","fullDistance","newDistance","calculateUnvisitedDistance","Math","abs","visualizeAStar","animateAStar","greadyBFS","visualizeGreadyBFS","swarmAlgo","calculateDistanceBetweenNodes","swarmIdx","groupBestLocation","sumRow","sumCol","avgRow","round","avgCol","getGroupBestLocation","calculateSwarmIdx","visualizeSwarm","recursiveDivision","orientation","chooseOrientation","wallInOrder","divide","x","y","width","height","passNodes","wx","wy","px","py","horizontal","wallCheck","wallCheck2","floor","random","wx1","wy1","map","e","includes","reduce","a","b","j","passCheck","passCheck2","dx","dy","passingFinal","k","Grid","setStartNode","setState","selectingStartNode","selectingFinishNode","setFinishNode","selectWeight","selectingWeight","handleMouseDown","mouseIsPress","handleMouseEnter","handleMouseLeave","handleMouseUp","Dijkstra","visualizeDFS","BFS","AStar","GreadyBFS","swarm","visualizeMaze","createMaze","getInitialGrid","prevProps","triggerAlgorithm","algorithm","resetGrid","newGrid","slice","forEach","type","onClick","rowIdx","key","nodeIdx","currentRow","createNode","PathFinding","clearPath","el","getElementsByClassName","classList","remove","clearBoard","selectAlgorithm","preventDefault","textContent","target","triggerAlgo","selectSpeed","value","BASE_ROUTE","to","data-toggle","href","name","exact","path","mergeSortAlgo","arr","animateArr","mergeSortInPlace","startPoint","endPoint","middlePoint","midPoint","start2","newArray","barCompare","tmpValue","index","merge","quickSortAlgo","quickSortHelper","runningPoint","pivotPoint","comparePoint","finishPoint","pivot","tmp","heapHelper","lengthArray","leftPoint","rightPoint","largestPoint","swap","temp","sortingVisualizer","componentDidMount","createArray","numOfBar","componentDidUpdate","num","arrayNumber","createRandomArray","visualizeBubbleSort","bubbleSort","visualizeSelectionSort","minIdx","barDone","selectionSort","visualizeMergeSort","mergeSort","visualizeQuickSort","quickSort","visualizeHeapSort","n","finish","heapSort","setNumOfBar","numBar","selectAlgo","sortingAlgorithm","startSorting","alert","onChange","style","bar","barIdx","NavBar","class","App","component","Sorting","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.138a3658.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Node.css'\r\n\r\nclass Node extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            row: this.props.row,\r\n            col: this.props.col\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {\r\n            row,\r\n            col,\r\n            isStart,\r\n            isFinish,\r\n            isWall,\r\n            onMouseEnter,\r\n            onMouseLeave,\r\n            onMouseUp,\r\n            onMouseDown,\r\n            isVisited,\r\n            isWeight\r\n        } = this.props;\r\n        const extraClassName = isFinish ? 'node-finish' : isStart ? 'node-start' : isWall ? 'node-wall' : isVisited ? 'node-visisted' : isWeight ? 'node-weight':'';\r\n        return(\r\n        <div \r\n            className={`Node ${extraClassName}`} \r\n            onMouseEnter={()=>onMouseEnter(row,col)}\r\n            onMouseDown={()=>onMouseDown(row,col)}\r\n            onMouseUp={()=>onMouseUp(row,col)}\r\n            onMouseLeave={()=>onMouseLeave(row,col)}\r\n            id={`node-${row}-${col}`}>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Node;","export function dijskstra(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    const unvisistedNode = getAllNodes(grid);\r\n    startNode.distance = 0;\r\n    while (!!unvisistedNode.length) {\r\n        sortNodeByDistance(unvisistedNode)\r\n        const closetNode = unvisistedNode.shift();\r\n        if (closetNode.isWall) continue;\r\n        if (closetNode.distance === Infinity) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        closetNode.isVisited = true;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        updateUnvisitedNeighbors(closetNode, grid);\r\n    };\r\n}\r\n\r\n\r\nfunction sortNodeByDistance(unvisistedNode) {\r\n    unvisistedNode.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n\r\n};\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (const neighbors of neighborNodes) {\r\n        if (neighbors.isWeight) {\r\n            neighbors.distance = node.distance + 15;\r\n        } else {\r\n            neighbors.distance = node.distance + 1;\r\n        }\r\n        neighbors.previousNode = node;\r\n    };\r\n}\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n};\r\n\r\nfunction getAllNodes(grid) {\r\n    const allNodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            allNodes.push(node);\r\n        }\r\n    }\r\n    return allNodes;\r\n};\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n\r\n};","import {dijskstra, getNodesinShortestPathOrder} from './../../algorithms/DijkstraAlgo'\r\n\r\nexport function visualizeDijkstra(grid, startNode, finishNode, speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = dijskstra(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateDijkstra(visitedNodeInOrder, NodesinShortestPathOrder, speed)\r\n};\r\n\r\nexport function animateDijkstra(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            console.log(node);\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function DFS(grid, startNode, finishNode) {\r\n    const nodeVisited = [];\r\n    startNode.distance = 0;\r\n    DFSAlgo(startNode, finishNode, nodeVisited, grid);\r\n    return nodeVisited;\r\n}\r\nfunction DFSAlgo(node, finishNode, nodeVisited, grid) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (let i = 0; i < neighborNodes.length && !finishNode.isVisited; i++) {\r\n        neighborNodes[i].isVisited = true;\r\n        if (neighborNodes[i].isWall) continue;\r\n        if (neighborNodes[i].distance === Infinity) {\r\n            neighborNodes[i].previousNode = node;\r\n            nodeVisited.push(neighborNodes[i])\r\n        }\r\n        if (neighborNodes[i] === finishNode) {\r\n            return neighborNodes[i].previousNode = node;\r\n        };\r\n        console.log(nodeVisited);\r\n        DFSAlgo(neighborNodes[i], finishNode, nodeVisited, grid);\r\n    }\r\n}\r\n\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighborNodes = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighborNodes.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighborNodes.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) neighborNodes.push(grid[row][col + 1]);\r\n    if (col > 0) neighborNodes.push(grid[row][col - 1]);\r\n    return neighborNodes.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nexport function findShortestPath(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n\r\n}","import { DFS, findShortestPath } from './../../algorithms/DFSAlgo'\r\n\r\nexport function DFSVisualizer(grid, startNode, finishNode, speed) {\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const nodeVisited = DFS(grid, StartNode, FinishNode);\r\n    const nodeInShortestPath = findShortestPath(FinishNode);\r\n    animateDFS(nodeVisited, nodeInShortestPath, speed);\r\n}\r\nfunction animateDFS(nodeVisited, nodeInShortestPath, speed) {\r\n    for (let i = 0; i <= nodeVisited.length-1; i++) {\r\n        if (i === nodeVisited.length -1) {\r\n            setTimeout(()=>animateNodeInShortestPath(nodeInShortestPath, speed), speed*i);\r\n            return\r\n            }\r\n        const node= nodeVisited[i];\r\n        setTimeout(() => {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited'\r\n        }, speed * i);\r\n    }\r\n\r\n}\r\nfunction animateNodeInShortestPath(nodeInShortestPath, speed){\r\n    for(let i =0; i<nodeInShortestPath.length; i++){\r\n        const node = nodeInShortestPath[i];\r\n        setTimeout(()=>{\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i)\r\n    }\r\n}","export function BFSAlgo(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    startNode.distance = 0;\r\n    startNode.isVisited = true;\r\n    let unvisitedNodeQueue = [];\r\n    unvisitedNodeQueue.push(startNode);\r\n    while (!!unvisitedNodeQueue.length) {\r\n        const closetNode = unvisitedNodeQueue.shift();\r\n        if (closetNode.isWall) continue;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        };\r\n        const finalNeighbors = updateNeighbors(closetNode, grid);\r\n        unvisitedNodeQueue=unvisitedNodeQueue.concat(finalNeighbors);\r\n    }\r\n    return visitedNodeInOrder;\r\n}\r\nfunction updateNeighbors(node, grid) {\r\n    const unvisistedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    const finalNeighbors = []\r\n    for (const neighbors of unvisistedNeighbors) {\r\n        neighbors.distance = node.distance + 1;\r\n        neighbors.previousNode = node;\r\n        neighbors.isVisited = true;\r\n        finalNeighbors.push(neighbors);\r\n    };\r\n    return finalNeighbors;\r\n}\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n};\r\n\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n\r\n}","import {BFSAlgo, getNodesinShortestPathOrder} from '../../algorithms/BFSAlgo'\r\n\r\nexport function visualizeBFS(grid, startNode, finishNode, speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = BFSAlgo(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateBFS(visitedNodeInOrder, NodesinShortestPathOrder, speed);\r\n};\r\n\r\nexport function animateBFS(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function AStarAlgo(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    const unvisitedNode = getAllNodes(grid);\r\n    startNode.distance = 0;\r\n    startNode.heuristicDistance = calculateHeuristic(startNode, finishNode);\r\n    startNode.fullDistance = startNode.distance +startNode.heuristicDistance;\r\n    while (!!unvisitedNode.length) {\r\n        sortNodeByDistance(unvisitedNode)\r\n        const closetNode = unvisitedNode.shift();\r\n        if (closetNode.isWall) continue;\r\n        if (closetNode.distance === Infinity) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        closetNode.isVisited = true;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        updateUnvisitedNeighbors(closetNode, grid, finishNode);\r\n    };\r\n}\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (const neighbors of neighborNodes) {\r\n        if (neighbors.isVisited) {\r\n            let newDistance = null;\r\n            let heuristicDistance = calculateHeuristic(neighbors, finishNode);\r\n            if (neighbors.isWeight) {\r\n                newDistance = node.distance + 15;\r\n            } else {\r\n                newDistance = node.distance + 1;\r\n            }\r\n            if (neighbors.distance > newDistance) {\r\n                neighbors.distance = newDistance;\r\n                neighbors.fullDistance = newDistance + heuristicDistance;\r\n                neighbors.previousNode = node;\r\n            }\r\n        } else {\r\n            calculateUnvisitedDistance(neighbors, node, finishNode);\r\n            neighbors.previousNode = node;\r\n        };\r\n    }\r\n}\r\nfunction calculateUnvisitedDistance(neighbors, node, finishNode) {\r\n    neighbors.heuristicDistance = calculateHeuristic(neighbors, finishNode);\r\n    if (neighbors.isWeight) {\r\n        neighbors.distance = node.distance + 15;\r\n    } else {\r\n        neighbors.distance = node.distance + 1;\r\n    }\r\n    neighbors.fullDistance = neighbors.distance + neighbors.heuristicDistance;\r\n}\r\n\r\nfunction calculateHeuristic(node, finishNode) {\r\n    let heuristicDistance = null;\r\n    const row = Math.abs(finishNode.row - node.row);\r\n    const col = Math.abs(finishNode.col - node.col);\r\n    heuristicDistance = row + col;\r\n    return heuristicDistance;\r\n}\r\n\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors;\r\n};\r\n\r\nfunction sortNodeByDistance(unvisitedNode) {\r\n    unvisitedNode.sort((nodeA, nodeB) => nodeA.fullDistance - nodeB.fullDistance);\r\n}\r\nfunction getAllNodes(grid) {\r\n    const allNodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            allNodes.push(node);\r\n        }\r\n    }\r\n    return allNodes;\r\n};\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n}","import {AStarAlgo, getNodesinShortestPathOrder} from './../../algorithms/AstarAlgo'\r\n\r\nexport function visualizeAStar(grid, startNode, finishNode,speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = AStarAlgo(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed);\r\n};\r\n\r\nexport function animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            console.log(node);\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function greadyBFS(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    const unvisitedNode = getAllNodes(grid);\r\n    startNode.distance = 0;\r\n    startNode.heuristicDistance = calculateHeuristic(startNode, finishNode);\r\n    startNode.fullDistance = startNode.distance +startNode.heuristicDistance;\r\n    while (!!unvisitedNode.length) {\r\n        sortNodeByDistance(unvisitedNode)\r\n        const closetNode = unvisitedNode.shift();\r\n        if (closetNode.isWall) continue;\r\n        if (closetNode.distance === Infinity) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        closetNode.isVisited = true;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        updateUnvisitedNeighbors(closetNode, grid, finishNode);\r\n    };\r\n}\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (const neighbors of neighborNodes) {\r\n        if (neighbors.isVisited) {\r\n            let newDistance = null;\r\n            let heuristicDistance = calculateHeuristic(neighbors, finishNode);\r\n            if (neighbors.isWeight) {\r\n                newDistance = node.distance + 15;\r\n            } else {\r\n                newDistance = node.distance + 1;\r\n            }\r\n            if (neighbors.distance > newDistance) {\r\n                neighbors.distance = newDistance;\r\n                neighbors.fullDistance = newDistance + heuristicDistance;\r\n                neighbors.previousNode = node;\r\n            }\r\n        } else {\r\n            calculateUnvisitedDistance(neighbors, node, finishNode);\r\n            neighbors.previousNode = node;\r\n        };\r\n    }\r\n}\r\nfunction calculateUnvisitedDistance(neighbors, node, finishNode) {\r\n    neighbors.heuristicDistance = calculateHeuristic(neighbors, finishNode);\r\n    if (neighbors.isWeight) {\r\n        neighbors.distance = node.distance + 15;\r\n    } else {\r\n        neighbors.distance = node.distance + 1;\r\n    }\r\n    neighbors.fullDistance = neighbors.distance + neighbors.heuristicDistance;\r\n}\r\n\r\nfunction calculateHeuristic(node, finishNode) {\r\n    let heuristicDistance = null;\r\n    const row = Math.abs(finishNode.row - node.row);\r\n    const col = Math.abs(finishNode.col - node.col);\r\n    heuristicDistance = row + col;\r\n    return heuristicDistance;\r\n}\r\n\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors;\r\n};\r\n\r\nfunction sortNodeByDistance(unvisitedNode) {\r\n    unvisitedNode.sort((nodeA, nodeB) => nodeA.heuristicDistance - nodeB.heuristicDistance);\r\n}\r\nfunction getAllNodes(grid) {\r\n    const allNodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            allNodes.push(node);\r\n        }\r\n    }\r\n    return allNodes;\r\n};\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n}\r\n","import {greadyBFS, getNodesinShortestPathOrder} from './../../algorithms/GreadyAlgo'\r\n\r\nexport function visualizeGreadyBFS(grid, startNode, finishNode, speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = greadyBFS(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed);\r\n};\r\n\r\nexport function animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function swarmAlgo(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    const unvisitedNode = getAllNodes(grid);\r\n    startNode.distance = 0;\r\n    startNode.heuristicDistance = calculateDistanceBetweenNodes(startNode, finishNode);\r\n    startNode.swarmIdx = 0;\r\n    startNode.fullDistance = startNode.distance + 0.2*startNode.heuristicDistance + 0.15*startNode.swarmIdx;\r\n    while (!!unvisitedNode.length) {\r\n        sortNodeByDistance(unvisitedNode)\r\n        const closetNode = unvisitedNode.shift();\r\n        if (closetNode.isWall) continue;\r\n        if (closetNode.distance === Infinity) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        closetNode.isVisited = true;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        updateUnvisitedNeighbors(closetNode, grid, finishNode, visitedNodeInOrder);\r\n    };\r\n}\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode, visitedNodeInOrder) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (const neighbors of neighborNodes) {\r\n        // if (neighbors.isVisited) {\r\n        //     let newDistance = null;\r\n        //     neighbors.swarmIdx = calculateSwarmIdx(neighbors, visitedNodeInOrder, finishNode);\r\n        //     if (neighbors.isWeight) {\r\n        //         newDistance = node.distance + 15;\r\n        //     } else {\r\n        //         newDistance = node.distance + 1;\r\n        //     }\r\n        //     if (neighbors.distance > newDistance) {\r\n        //         neighbors.distance = newDistance;\r\n        //         neighbors.fullDistance = 2*newDistance + neighbors.heuristicDistance + neighbors.swarmIdx;\r\n        //         neighbors.previousNode = node;\r\n        //     }\r\n        // } else {\r\n            calculateUnvisitedDistance(neighbors, node, finishNode, visitedNodeInOrder);\r\n            neighbors.previousNode = node;\r\n        // };\r\n    }\r\n}\r\nfunction calculateUnvisitedDistance(neighbors, node, finishNode, visitedNodeInOrder) {\r\n    neighbors.heuristicDistance = calculateDistanceBetweenNodes(neighbors, finishNode);\r\n    neighbors.swarmIdx = calculateSwarmIdx(neighbors, visitedNodeInOrder, finishNode);\r\n    if (neighbors.isWeight) {\r\n        neighbors.distance = node.distance + 15;\r\n    } else {\r\n        neighbors.distance = node.distance + 1;\r\n    }\r\n    neighbors.fullDistance = neighbors.distance + 0.2*neighbors.heuristicDistance + 0.15*neighbors.swarmIdx;\r\n}\r\nfunction calculateSwarmIdx(node, visitedNodeInOrder, finishNode){\r\n    const groupBestLocation = getGroupBestLocation(visitedNodeInOrder, finishNode);\r\n    const swarmIdx = calculateDistanceBetweenNodes(node, groupBestLocation);\r\n    return swarmIdx;\r\n}\r\n\r\nfunction getGroupBestLocation(visitedNodeInOrder,finishNode){\r\n    let sumRow = null;\r\n    let sumCol = null;\r\n    for(const node of visitedNodeInOrder){\r\n        sumRow += node.row;\r\n        sumCol += node.col;\r\n    }\r\n    const avgRow = Math.round(((sumRow/visitedNodeInOrder.length)+ finishNode.row)/2);\r\n    const avgCol = Math.round(((sumCol/visitedNodeInOrder.length)+finishNode.col)/2);\r\n    const groupBestLocation = {\r\n        row: avgRow,\r\n        col: avgCol,\r\n    }\r\n    return groupBestLocation\r\n}\r\n\r\nfunction calculateDistanceBetweenNodes(nodeA, nodeB) {\r\n    let heuristicDistance = null;\r\n    const row = Math.abs(nodeB.row - nodeA.row);\r\n    const col = Math.abs(nodeB.col - nodeA.col);\r\n    heuristicDistance = row + col;\r\n    return heuristicDistance;\r\n}\r\n\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor=> !neighbor.isVisited);\r\n};\r\n\r\nfunction sortNodeByDistance(unvisitedNode) {\r\n    unvisitedNode.sort((nodeA, nodeB) => nodeA.fullDistance - nodeB.fullDistance);\r\n}\r\nfunction getAllNodes(grid) {\r\n    const allNodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            allNodes.push(node);\r\n        }\r\n    }\r\n    return allNodes;\r\n};\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n}","import {swarmAlgo, getNodesinShortestPathOrder} from './../../algorithms/SwarmAlgo'\r\n\r\nexport function visualizeSwarm(grid, startNode, finishNode, speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = swarmAlgo(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed);\r\n};\r\n\r\nexport function animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            console.log(node);\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function recursiveDivision(grid, startNode, finishNode) {\r\n    let orientation = chooseOrientation(grid[0].length, grid.length);\r\n    const wallInOrder = [];\r\n    const passNodes = [];\r\n\r\n    for (let i = 0; i < grid[0].length; i++) {\r\n        wallInOrder.push(grid[0][i]);\r\n        wallInOrder.push(grid[grid.length - 1][i])\r\n    }\r\n    for (let i = 1; i < grid.length - 1; i++) {\r\n        wallInOrder.push(grid[i][0]);\r\n        wallInOrder.push(grid[i][grid[0].length - 1]);\r\n    }\r\n    for (let i = 0; i < wallInOrder.length; i++) {\r\n        wallInOrder[i].isWall = true;\r\n    }\r\n    divide(grid, 0, 0, grid[0].length - 2, grid.length - 2, orientation, wallInOrder, passNodes);\r\n    return wallInOrder;\r\n}\r\nfunction chooseOrientation(width, height) {\r\n    let orientation;\r\n    if (width < height) {\r\n        orientation = 'HORIZONTAL';\r\n    } else if (height < width) {\r\n        orientation = 'VERTICAL';\r\n    } else {\r\n        orientation = (Math.random() > 0.5) ? 'HORIZONTAL' : 'VERTICAL'\r\n    };\r\n    return orientation\r\n}\r\nfunction divide(grid, x, y, width, height, orientation, wallInOrder, passNodes) {\r\n    if (width < 2 || height < 2 || (width === 2 && height === 2)) return;\r\n    let horizontal = orientation === 'HORIZONTAL';\r\n    let wallCheck = [];\r\n    let wallCheck2 = [];\r\n    let wx;\r\n    let wy;\r\n    let i = 0;\r\n\r\n    do {\r\n        wallCheck = [orientation];\r\n        wallCheck2 = [orientation];\r\n        wx = x + (horizontal ? 0 : Math.floor(Math.random() * (width - 3) + 2));\r\n        wy = y + (horizontal ? Math.floor(Math.random() * (height - 3) + 2) : 0);\r\n        let wx1 = wx + width + 1;\r\n        let wy1 = wy + height + 1;\r\n        i++;\r\n        horizontal ? wallCheck2.push(wx1, wy) : wallCheck2.push(wx, wy1);\r\n        wallCheck.push(wx, wy);\r\n        // console.log(passNodes.map(e => e.includes(...wallCheck)));\r\n        // console.log(passNodes.map(e => e.includes(...wallCheck2)));\r\n        // console.log(i);\r\n\r\n    }\r\n    while (i < 100 && (passNodes.map(e => e.includes(...wallCheck)).reduce((a, b) => a + b, 0) > 0 || passNodes.map(e => e.includes(...wallCheck2)).reduce((a, b) => a + b, 0) > 0))\r\n\r\n    let px;\r\n    let py;\r\n    let j = 0;\r\n    if (i === 100) {\r\n        let passCheck = [];\r\n        let passCheck2 = [];\r\n        do {\r\n            passCheck = [orientation];\r\n            passCheck2 = [orientation];\r\n            px = wx + (horizontal ? Math.floor(Math.random() * (width - 1) + 1) : 0);\r\n            py = wy + (horizontal ? 0 : Math.floor(Math.random() * (height - 1) + 1));\r\n            if (horizontal) {\r\n                passCheck.push(px + 1, py)\r\n                passCheck2.push(px - 1, py);\r\n            } else {\r\n                passCheck.push(px, py + 1);\r\n                passCheck.push(px, py - 1);\r\n            }\r\n            j++;\r\n            // console.log(\"Day la \" + j);\r\n        } while (j < 10 && !(passNodes.map(e => e.includes(...passCheck)).reduce((a, b) => a + b, 0) > 0) && !(passNodes.map(e => e.includes(...passCheck2)).reduce((a, b) => a + b, 0) > 0))\r\n    } else {\r\n        px = wx + (horizontal ? Math.floor(Math.random() * (width - 1) + 1) : 0);\r\n        py = wy + (horizontal ? 0 : Math.floor(Math.random() * (height - 1) + 1));\r\n    }\r\n    let length = horizontal ? width : height;\r\n    let dx = horizontal ? 1 : 0;\r\n    let dy = horizontal ? 0 : 1;\r\n\r\n    let passingFinal = [horizontal ? \"VERTICAL\" : \"HORIZONTAL\", px, py];\r\n    console.log(passNodes);\r\n    passNodes.push(passingFinal);\r\n    console.log(passingFinal);\r\n    console.log(passNodes);\r\n    if (j !== 10) {\r\n        for (let k = 0; k < length; k++) {\r\n            wx += dx;\r\n            wy += dy;\r\n            if (wx !== px || wy !== py) {\r\n                grid[wy][wx].isWall = true;\r\n                wallInOrder.push(grid[wy][wx]);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (horizontal) {\r\n        divide(grid, x, y, width, wy - y - 1, chooseOrientation(width, wy - y - 1), wallInOrder, passNodes);\r\n        divide(grid, x, wy, width, y + height - wy, chooseOrientation(width, y + height - wy), wallInOrder, passNodes);\r\n    } else {\r\n        divide(grid, x, y, wx - x - 1, height, chooseOrientation(wx - x - 1, height), wallInOrder, passNodes);\r\n        divide(grid, wx, y, x + width - wx, height, chooseOrientation(x + width - wx, height), wallInOrder, passNodes);\r\n    }\r\n};\r\n\r\n\r\n ","import React, { Component } from 'react';\r\nimport Node from './Node'\r\nimport './Grid.css'\r\nimport { visualizeDijkstra as Dijkstra } from '../Dijkstra/DijkstraVisualizer'\r\nimport { DFSVisualizer as DFS } from '../Depth First Search/DFSVisualizer'\r\nimport { visualizeBFS as BFS } from '../Breadth First Search/BFSVisualizer';\r\nimport { visualizeAStar as AStar } from '../A star/AStarVisualizer';\r\nimport { visualizeGreadyBFS as GreadyBFS } from '../Gready Best First Search/GreadyBFS';\r\nimport { visualizeSwarm as swarm } from '../Swarm/SwarmVisualizer';\r\nimport { recursiveDivision as createMaze } from '../../Maze/RecursiveDivision';\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPress: false,\r\n            selectingWeight: false,\r\n            selectingStartNode: false,\r\n            selectingFinishNode: false,\r\n            startNode: { row: 10, col: 15 },\r\n            finishNode: { row: 10, col: 40 },\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.triggerAlgorithm !== this.props.triggerAlgorithm) {\r\n            if (this.props.triggerAlgorithm) {\r\n                switch (this.props.algorithm) {\r\n                    case 'Dijkstra':\r\n                        this.visualizeDijkstra(this.props.speed);\r\n                        break;\r\n                    case 'A star':\r\n                        this.visualizeAStar(this.props.speed);\r\n                        break;\r\n                    case 'Depth First Search':\r\n                        this.visualizeDFS(this.props.speed);\r\n                        break;\r\n                    case 'Breadth First Search':\r\n                        this.visualizeBFS(this.props.speed);\r\n                        break;\r\n                    case 'Gready Best First Search':\r\n                        this.visualizeGreadyBFS(this.props.speed);\r\n                        break;\r\n                    case 'Swarm':\r\n                        this.visualizeSwarm(this.props.speed);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        if (prevProps.resetGrid !== this.props.resetGrid) {\r\n            const { grid } = this.state;\r\n            const newGrid = grid.slice();\r\n            newGrid.forEach(row => {\r\n                row.forEach(node => {\r\n                    node.isVisited = false;\r\n                    node.previousNode = null;\r\n                    node.isWall = false;\r\n                    node.isWeight = false;\r\n                    node.distance = Infinity;\r\n                    node.heuristicDistance = Infinity;\r\n                    node.fullDistance = Infinity\r\n                })\r\n            });\r\n            this.setState({ grid: newGrid });\r\n        }\r\n    }\r\n\r\n    setStartNode = () => {\r\n        this.setState({ selectingStartNode: true });\r\n        this.setState({ selectingFinishNode: false });\r\n    }\r\n    setFinishNode = () => {\r\n        this.setState({ selectingFinishNode: true });\r\n        this.setState({ selectingStartNode: false });\r\n    }\r\n\r\n    selectWeight = () => {\r\n        this.setState({ selectingWeight: !this.state.selectingWeight });\r\n        console.log(this.state.selectingWeight);\r\n    }\r\n\r\n    handleMouseDown = (row, col) => {\r\n        const {grid} = this.state\r\n        this.state.mouseIsPress = true;\r\n        if (row === this.state.startNode.row && col === this.state.startNode.col) {\r\n            this.setState({ selectingStartNode: true });\r\n            return\r\n        };\r\n        if (row === this.state.finishNode.row && col === this.state.finishNode.col) {\r\n            this.setState({ selectingFinishNode: true });\r\n            return\r\n        };\r\n\r\n        if (this.state.selectingWeight) {\r\n            grid[row][col].isWeight = !this.state.grid[row][col].isWeight;\r\n            if (document.getElementById(`node-${row}-${col}`).className === 'Node node-weight') {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            } else {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node node-weight';\r\n            }\r\n            return\r\n        } else {\r\n            grid[row][col].isWall = !this.state.grid[row][col].isWall;\r\n            if (document.getElementById(`node-${row}-${col}`).className === 'Node node-wall') {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            } else {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node node-wall';\r\n            }\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n    handleMouseEnter = (row, col) => {\r\n        const {grid,startNode, finishNode} = this.state\r\n        if (this.state.selectingStartNode) {\r\n            grid[row][col].isStart = true;\r\n            startNode.row = row;\r\n            startNode.col = col;\r\n            document.getElementById(`node-${row}-${col}`).className = 'Node node-start'\r\n            return;\r\n        }\r\n        if (this.state.selectingFinishNode) {\r\n            grid[row][col].isFinish = true;\r\n            finishNode.row = row;\r\n            finishNode.col = col;\r\n            document.getElementById(`node-${row}-${col}`).className = 'Node node-finish'\r\n            return;\r\n        }\r\n        if (this.state.selectingWeight && this.state.mouseIsPress) {\r\n            grid[row][col].isWeight = !this.state.grid[row][col].isWeight;\r\n            if (document.getElementById(`node-${row}-${col}`).className === 'Node node-weight') {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            } else {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node node-weight';\r\n            }\r\n            return;\r\n        }\r\n        if (this.state.mouseIsPress) {\r\n            grid[row][col].isWall = !this.state.grid[row][col].isWall;\r\n            if (document.getElementById(`node-${row}-${col}`).className === 'Node node-wall') {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            } else {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node node-wall';\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    handleMouseLeave = (row, col) => {\r\n        const {grid} = this.state\r\n        if (this.state.selectingStartNode) {\r\n            grid[row][col].isStart = false;\r\n            document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            return\r\n        }\r\n        if (this.state.selectingFinishNode) {\r\n            grid[row][col].isFinish = false;\r\n            document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            return\r\n        }\r\n    }\r\n    handleMouseUp = (row, col) => {\r\n        this.state.mouseIsPress = false;\r\n        this.state.selectingStartNode = false;\r\n        this.state.selectingFinishNode = false;\r\n    }\r\n\r\n    visualizeDijkstra = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        Dijkstra(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeDFS = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        DFS(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeBFS = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        BFS(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeAStar = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        AStar(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeGreadyBFS = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        GreadyBFS(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeSwarm = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        swarm(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeMaze = () => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        const wallInOrder = [...createMaze(grid, startNode, finishNode)];\r\n        for (let i = 0; i < wallInOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = wallInOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-wall';\r\n            }, 50 * i)\r\n        };\r\n    }\r\n    render() {\r\n        const { grid} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <button type=\"button\" className=\"btn btn-default\" onClick={this.selectWeight}>Select Weight</button>\r\n                <button type=\"button\" className=\"btn btn-default\" onClick={this.visualizeMaze}>Create Maze</button>\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div key={rowIdx} className=\"row\">\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const { row, col, isFinish, isStart, isWall, isWeight } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            row={row}\r\n                                            col={col}\r\n                                            isFinish={isFinish}\r\n                                            isStart={isStart}\r\n                                            isWall={isWall}\r\n                                            isWeight={isWeight}\r\n                                            onMouseEnter={this.handleMouseEnter}\r\n                                            onMouseDown={this.handleMouseDown}\r\n                                            onMouseUp={this.handleMouseUp}\r\n                                            onMouseLeave={this.handleMouseLeave}\r\n                                        ></Node>\r\n                                    );\r\n                                })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Grid;\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row <= 20; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col <= 50; col++) {\r\n            currentRow.push(createNode(row, col));\r\n        };\r\n        grid.push(currentRow);\r\n    };\r\n    return grid;\r\n}\r\n\r\nconst createNode = (row, col) => {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === 10 && col === 15 ? true : false,\r\n        isFinish: row === 10 && col === 40 ? true : false,\r\n        isWall: false,\r\n        distance: Infinity,\r\n        previousNode: null,\r\n        isVisited: false,\r\n        isWeight: false,\r\n        heuristicDistance: Infinity,\r\n        swarmIdx: Infinity,\r\n        fullDistance: Infinity,\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './PathFinding.css';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\nimport Grid from './GridAndNode/Grid'\r\n\r\n\r\nclass PathFinding extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      algorithm: null,\r\n      triggerAlgorithm: false,\r\n      resetGrid: false,\r\n      speed: 20\r\n    }\r\n  }\r\n\r\n  clearPath = () => {\r\n    var el = document.getElementsByClassName('Node');\r\n    for (let i = 0; i < el.length; i++) {\r\n      el[i].classList.remove('node-visited', 'node-shortest-path');\r\n      this.setState({ triggerAlgorithm: false })\r\n    }\r\n  }\r\n  clearBoard = (grid) => {\r\n    var el = document.getElementsByClassName('Node');\r\n    for (let i = 0; i < el.length; i++) {\r\n      el[i].classList.remove('node-visited', 'node-shortest-path', 'node-start', 'node-finish', 'node-wall', 'node-wieght');\r\n    }\r\n    this.setState({ triggerAlgorithm: false });\r\n    this.setState({ resetGrid: true });\r\n  }\r\n  selectAlgorithm = (e) => {\r\n    e.preventDefault();\r\n    const { textContent } = e.target;\r\n    this.setState({ algorithm: textContent })\r\n  }\r\n  triggerAlgo = () => {\r\n    this.setState({ triggerAlgorithm: true });\r\n    this.setState({ resetGrid: false })\r\n  }\r\n  selectSpeed = (value) => {\r\n    this.setState({ speed: value })\r\n  }\r\n  render() {\r\n    const { algorithm, triggerAlgorithm, resetGrid, speed } = this.state;\r\n    const { BASE_ROUTE } = this.props\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"navbar\">\r\n          <Link className=\"navbar-brand\" to='/'>Home</Link>\r\n          <Link className=\"navbar-brand\" to=\"/PathFinding\">PathFinding Visualizer</Link>\r\n          <ul className=\"nav navbar-nav\">\r\n            <li className=\"dropdown\">\r\n              <a className=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">Algorithms</a>\r\n              <ul className=\"dropdown-menu\" id=\"AlgorithmList\">\r\n                <li className=\"navbar-nav\">\r\n                  <a onClick={this.selectAlgorithm} href=\"#\" name=\"Dijkstra\">Dijkstra</a>\r\n                </li>\r\n                <li className=\"navbar-nav\">\r\n                  <a onClick={this.selectAlgorithm} name=\"Depth First Search\" href=\"#\">Depth First Search</a>\r\n                </li>\r\n                <li className=\"navbar-nav\">\r\n                  <a onClick={this.selectAlgorithm} name=\"BFS\" href=\"#\">Breadth First Search</a>\r\n                </li>\r\n                <li className=\"navbar-nav\">\r\n                  <a onClick={this.selectAlgorithm} name=\"AStar\" href=\"#\">A star</a>\r\n                </li>\r\n                <li className=\"navbar-nav\">\r\n                  <a onClick={this.selectAlgorithm} name=\"GreadyBFS\" href=\"#\">Gready Best First Search</a>\r\n                </li>\r\n                <li className=\"navbar-nav\">\r\n                  <a onClick={this.selectAlgorithm} name=\"Swarm\" href=\"#\">Swarm</a>\r\n                </li>\r\n              </ul>\r\n            </li>\r\n            <li>\r\n              <a href=\"#\">Maze & Pattern</a>\r\n            </li>\r\n            <li>\r\n              <a className='navbar-brand' onClick={this.triggerAlgo} href=\"#\">{!algorithm ? 'Please Pick Algorithm' : 'Visualize ' + algorithm} </a>\r\n            </li>\r\n            <li>\r\n              <a onClick={this.clearBoard}>ClearBoard</a>\r\n            </li>\r\n            <li>\r\n              <a onClick={this.clearPath}>Clear Path</a>\r\n            </li>\r\n            <li>\r\n              <a data-toggle=\"dropdown\" href=\"#\">Speed</a>\r\n              <ul className=\"dropdown-menu\">\r\n                <li>\r\n                  <a onClick={() => this.selectSpeed(3)} href=\"#\">Fast</a>\r\n                </li>\r\n                <li>\r\n                  <a onClick={() => this.selectSpeed(60)} href=\"#\">Medium</a>\r\n                </li>\r\n                <li>\r\n                  <a onClick={() => this.selectSpeed(100)} href=\"#\">Slow</a>\r\n                </li>\r\n              </ul>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div id=\"mainGrid\">\r\n          <div id=\"mainText\">\r\n          </div>\r\n          <div id=\"algorithmDescriptor\">\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <Route exact path=\"/PathFinding\">\r\n            <Grid\r\n              triggerAlgorithm={triggerAlgorithm}\r\n              algorithm={algorithm}\r\n              resetGrid={resetGrid}\r\n              speed={speed}\r\n            ></Grid>\r\n          </Route>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFinding;","export function mergeSortAlgo(arr) {\r\n    const animateArr = [];\r\n    // const addArray = [...arr]; when use merSortWithAddArray\r\n    mergeSortInPlace(arr, 0, arr.length - 1, animateArr);\r\n    return animateArr;\r\n}\r\nfunction mergeSortWithAddArray(arr, addArray, startPoint, endPoint, animateArr) {\r\n    if (startPoint === endPoint) { return }\r\n    let middlePoint = (endPoint - startPoint + 1) / 2;\r\n    let newStart = Math.ceil(endPoint - middlePoint + 1);\r\n    let newEnd = Math.ceil(startPoint + middlePoint - 1);\r\n    console.log(startPoint, newEnd, newStart, endPoint);\r\n    mergeSortWithAddArray(arr, addArray, startPoint, newEnd, animateArr);\r\n    mergeSortWithAddArray(arr, addArray, newStart, endPoint, animateArr);\r\n    let j = newStart;\r\n    let i = startPoint;\r\n    for (let idx = startPoint; idx <= endPoint; idx++) {\r\n        if (arr[j] <= arr[i] && j <= endPoint && i <= newEnd) {\r\n            addArray[idx] = arr[j];\r\n            animateArr.push({\r\n                newArray: [...addArray],\r\n                barCompare: [i, j]\r\n            });\r\n            j++;\r\n        } else if (arr[i] <= arr[j] && i <= newEnd && j <= endPoint) {\r\n            addArray[idx] = arr[i];\r\n            animateArr.push({\r\n                newArray: [...addArray],\r\n                barCompare: [i, j]\r\n            });\r\n            i++;\r\n        } else if (i > newEnd) {\r\n            addArray[idx] = arr[j];\r\n            animateArr.push({\r\n                newArray: [...addArray],\r\n                barCompare: [i - 1, j]\r\n            });\r\n            j++;\r\n        } else if (j > endPoint) {\r\n            addArray[idx] = arr[i];\r\n            animateArr.push({\r\n                newArray: [...addArray],\r\n                barCompare: [i, j - 1]\r\n            });\r\n            i++;\r\n        }\r\n    }\r\n    for (let k = startPoint; k <= endPoint; k++) {\r\n        arr[k] = addArray[k];\r\n    }\r\n}\r\nfunction mergeSortInPlace(arr, startPoint, endPoint, animateArr) {\r\n    if (startPoint === endPoint) { return }\r\n    let middlePoint = Math.floor(startPoint + (endPoint - startPoint) / 2);\r\n    mergeSortInPlace(arr, startPoint, middlePoint, animateArr);\r\n    mergeSortInPlace(arr, middlePoint + 1, endPoint, animateArr);\r\n    merge(arr, startPoint, middlePoint, endPoint, animateArr)\r\n\r\n}\r\nfunction merge(arr, startPoint, midPoint, endPoint, animateArr) {\r\n    let start2 = midPoint + 1;\r\n    if (arr[midPoint] <= arr[start2]) return;\r\n    while (startPoint <= midPoint && start2 <= endPoint) {\r\n        if (arr[startPoint] <= arr[start2]) {\r\n            animateArr.push({\r\n                newArray: [...arr],\r\n                barCompare: [startPoint, start2]\r\n            })\r\n            startPoint++;\r\n        } else {\r\n            let tmpValue = arr[start2];\r\n            let index = start2;\r\n            while (index > startPoint) {\r\n                arr[index] = arr[index - 1];\r\n                index--;\r\n            }\r\n            arr[startPoint] = tmpValue;\r\n            animateArr.push({\r\n                newArray: [...arr],\r\n                barCompare: [startPoint, start2]\r\n            })\r\n            startPoint++;\r\n            start2++;\r\n            midPoint++;\r\n        }\r\n    }\r\n    while (startPoint <= midPoint) {\r\n        animateArr.push({\r\n            newArray: [...arr],\r\n            barCompare: [startPoint, start2-1]\r\n        })\r\n        startPoint++;\r\n    }\r\n    while (start2 <= endPoint) {\r\n        animateArr.push({\r\n            newArray: [...arr],\r\n            barCompare: [startPoint-1, start2]\r\n        });\r\n        start2++;\r\n    }\r\n\r\n}\r\n","export function quickSortAlgo(arr) {\r\n    const animateArr = [];\r\n    quickSortHelper(arr, 0, arr.length - 1, animateArr)\r\n    return animateArr;\r\n}\r\nfunction quickSortHelper(arr, startPoint, endPoint, animateArr) {\r\n    // console.log(arr);\r\n    if (startPoint === endPoint) {\r\n        animateArr.push(\r\n            {\r\n                state: 'finish',\r\n                newArray: [...arr],\r\n                runningPoint: null,\r\n                pivotPoint: null,\r\n                comparePoint: null,\r\n                finishPoint: startPoint\r\n            });\r\n            return;\r\n    }\r\n    let pivot = endPoint;\r\n    let runningPoint = startPoint;\r\n    // console.log(runningPoint);\r\n    for (let i = startPoint + 1; i <= endPoint; i++) {\r\n        if (i === endPoint && arr[runningPoint] <= arr[pivot] && runningPoint < endPoint - 1) {\r\n            runningPoint++;\r\n            let tmp = arr[pivot];\r\n            arr[pivot] = arr[runningPoint];\r\n            arr[runningPoint] = tmp;\r\n        } else if (i === endPoint && arr[runningPoint] <= arr[pivot] && runningPoint === endPoint - 1) {\r\n            runningPoint++;\r\n        } else if (i === endPoint && arr[runningPoint] > arr[pivot]) {\r\n            let tmp = arr[pivot];\r\n            arr[pivot] = arr[runningPoint];\r\n            arr[runningPoint] = tmp;\r\n        } else if (arr[i] <= arr[pivot]) {\r\n            let tmp = arr[i];\r\n            arr[i] = arr[runningPoint];\r\n            arr[runningPoint] = tmp;\r\n            runningPoint++;\r\n            if (runningPoint < i) {\r\n                i--;\r\n            };\r\n        }\r\n        animateArr.push(\r\n            {\r\n                state: 'partionning',\r\n                newArray: [...arr],\r\n                runningPoint: runningPoint,\r\n                pivotPoint: pivot,\r\n                comparePoint: i\r\n            })\r\n    }\r\n    animateArr.push(\r\n        {\r\n            state: 'partioned',\r\n            newArray: [...arr],\r\n            runningPoint: null,\r\n            pivotPoint: runningPoint,\r\n            comparePoint: null\r\n        });\r\n    console.log(runningPoint);\r\n    // console.log(arr);\r\n    // return\r\n    if (runningPoint > startPoint) {\r\n        quickSortHelper(arr, startPoint, runningPoint - 1, animateArr);\r\n    }\r\n    if (runningPoint < endPoint) {\r\n        quickSortHelper(arr, runningPoint + 1, endPoint, animateArr);\r\n    }\r\n}\r\n\r\n","export function heapSortAlgo(arr) {\r\n    const animateArr = [];\r\n    for (let i = Math.floor(arr.length / 2 - 1); i >= 0; i--) {\r\n        heapHelper(arr, i, arr.length, animateArr)\r\n    }\r\n    for (let n = arr.length - 1; n >= 0; n--) {\r\n        swap(arr, n, 0);\r\n        animateArr.push({\r\n            state: 'finish',\r\n            finish: n,\r\n            newArray: [...arr]\r\n        })\r\n        heapHelper(arr, 0, n, animateArr)\r\n    }\r\n    return animateArr;\r\n}\r\n\r\nfunction heapHelper(arr, i, lengthArray, animateArr) {\r\n    let leftPoint = 2 * i + 1;\r\n    let rightPoint = 2 * i + 2;\r\n    let largestPoint = i;\r\n    if (leftPoint < lengthArray && rightPoint < lengthArray) {\r\n        animateArr.push({\r\n            state: 'heapify',\r\n            comparePoint: [leftPoint, rightPoint],\r\n            largestPoint: largestPoint,\r\n            newArray: [...arr]\r\n        });\r\n    }\r\n    if (arr[leftPoint] > arr[largestPoint] && leftPoint < lengthArray) {\r\n        largestPoint = leftPoint;\r\n    }\r\n    if (arr[rightPoint] > arr[largestPoint] && rightPoint < lengthArray) {\r\n        largestPoint = rightPoint;\r\n    }\r\n    if (largestPoint !== i) {\r\n        swap(arr, i, largestPoint);\r\n        heapHelper(arr, largestPoint, lengthArray, animateArr);\r\n    }\r\n}\r\nfunction swap(arr, a, b) {\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n}","import React, { Component } from 'react';\r\nimport './SortingVisualize.css';\r\nimport {Link} from 'react-router-dom'\r\nimport { newBubbleSort as bubbleSort } from './Algorithm/BubbleSort';\r\nimport { selectionSortAlgo as selectionSort } from './Algorithm/SelectionSort'\r\nimport { mergeSortAlgo as mergeSort } from './Algorithm/MergeSort'\r\nimport { quickSortAlgo as quickSort } from './Algorithm/QuickSort'\r\nimport { heapSortAlgo as heapSort } from './Algorithm/HeapSort'\r\n\r\nclass sortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrayNumber: [],\r\n            numOfBar: 100,\r\n            sortingAlgorithm: null,\r\n            speed: 60\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        this.createArray(this.state.numOfBar);\r\n    }\r\n    componentDidUpdate = () => {\r\n\r\n    }\r\n    createArray = (numOfBar) => {\r\n        const arr = [];\r\n        for (let i = 0; i < numOfBar; i++) {\r\n            let num = Math.floor(Math.random() * (500 - 10) + 10);\r\n            arr.push(num);\r\n        }\r\n        this.setState({ arrayNumber: arr });\r\n    }\r\n\r\n    createRandomArray = () => {\r\n        const { numOfBar } = this.state;\r\n        this.createArray(numOfBar);\r\n        if (numOfBar !== null) {\r\n            for (let i = 0; i < numOfBar; i++) {\r\n                document.getElementById(`bar-${i}`).className = 'barChart';\r\n            }\r\n        }\r\n    }\r\n    visualizeBubbleSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        var animateArr = bubbleSort([...arrayNumber]);\r\n        let j = 0;\r\n        let tmp = arrayNumber.length - 1\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            if (i !== 0 && i % (tmp) === 0) {\r\n                j++;\r\n                tmp = tmp + arrayNumber.length - j;\r\n                console.log(animateArr[i][0], i)\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i][0]}`).className = 'barChart finished';\r\n                }, speed * i)\r\n            } else {\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i][0]}`).className = 'barChart compare';\r\n                    document.getElementById(`bar-${animateArr[i][1]}`).className = 'barChart compare';\r\n                    this.setState({ arrayNumber: animateArr[i][2] })\r\n                }, speed * i);\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i][0]}`).className = 'barChart';\r\n                    document.getElementById(`bar-${animateArr[i][1]}`).className = 'barChart';\r\n                }, speed * i + speed * 0.8)\r\n            }\r\n        }\r\n    }\r\n    visualizeSelectionSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        var animateArr = selectionSort([...arrayNumber]);\r\n        console.log(animateArr);\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            if (animateArr[i].state === 'done') {\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i].barDone}`).className = 'barChart finished';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray })\r\n                }, speed * i)\r\n            } else {\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i].barCompare[0]}`).className = 'barChart compare';\r\n                    document.getElementById(`bar-${animateArr[i].barCompare[1]}`).className = 'barChart compare';\r\n\r\n                }, speed * i);\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i].barCompare[0]}`).className = 'barChart';\r\n                    document.getElementById(`bar-${animateArr[i].barCompare[1]}`).className = 'barChart';\r\n                }, speed * i + speed * 0.8)\r\n            }\r\n        }\r\n    }\r\n    visualizeMergeSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        var animateArr = mergeSort([...arrayNumber]);\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            setTimeout(() => {\r\n                document.getElementById(`bar-${animateArr[i].barCompare[0]}`).className = 'barChart compare';\r\n                document.getElementById(`bar-${animateArr[i].barCompare[1]}`).className = 'barChart compare';\r\n                this.setState({ arrayNumber: animateArr[i].newArray })\r\n            }, speed * i);\r\n            setTimeout(() => {\r\n                document.getElementById(`bar-${animateArr[i].barCompare[0]}`).className = 'barChart';\r\n                document.getElementById(`bar-${animateArr[i].barCompare[1]}`).className = 'barChart';\r\n            }, speed * i + speed * 0.8)\r\n        }\r\n    }\r\n    visualizeQuickSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        const animateArr = quickSort([...arrayNumber]);\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            setTimeout(() => {\r\n                if (animateArr[i].state === 'partionning') {\r\n                    document.getElementById(`bar-${animateArr[i].runningPoint}`).className = 'barChart compare';\r\n                    document.getElementById(`bar-${animateArr[i].pivotPoint}`).className = 'barChart pivot';\r\n                    document.getElementById(`bar-${animateArr[i].comparePoint}`).className = 'barChart compare';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray });\r\n                } else if (animateArr[i].state === 'partioned') {\r\n                    document.getElementById(`bar-${animateArr[i].pivotPoint}`).className = 'barChart finished'\r\n                }\r\n                else if (animateArr[i].state === 'finish') {\r\n                    document.getElementById(`bar-${animateArr[i].finishPoint}`).className = 'barChart finished'\r\n                }\r\n            }, speed * i);\r\n            setTimeout(() => {\r\n                if (animateArr[i].state === 'partionning') {\r\n                    document.getElementById(`bar-${animateArr[i].runningPoint}`).className = 'barChart';\r\n                    document.getElementById(`bar-${animateArr[i].comparePoint}`).className = 'barChart';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray });\r\n                }\r\n            }, speed * i + speed * 0.8);\r\n\r\n        }\r\n    }\r\n    visualizeHeapSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        const animateArr = heapSort([...arrayNumber]);\r\n        console.log(animateArr);\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            setTimeout(() => {\r\n                if (animateArr[i].state === 'finish') {\r\n                    document.getElementById(`bar-${animateArr[i].finish}`).className = 'barChart finished';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray });\r\n                } else if (animateArr[i].state === 'heapify') {\r\n                    console.log(animateArr[i].largestPoint);\r\n                    document.getElementById(`bar-${animateArr[i].largestPoint}`).className = 'barChart pivot';\r\n                    document.getElementById(`bar-${animateArr[i].comparePoint[0]}`).className = 'barChart compare';\r\n                    document.getElementById(`bar-${animateArr[i].comparePoint[1]}`).className = 'barChart compare';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray });\r\n                    setTimeout(() => {\r\n                        document.getElementById(`bar-${animateArr[i].largestPoint}`).className = 'barChart';\r\n                        document.getElementById(`bar-${animateArr[i].comparePoint[0]}`).className = 'barChart';\r\n                        document.getElementById(`bar-${animateArr[i].comparePoint[1]}`).className = 'barChart';\r\n                    }, speed * 0.8)\r\n                }\r\n            }, speed * i);\r\n        }\r\n    }\r\n    setNumOfBar = (e) => {\r\n        let numBar = e.target.value;\r\n        if (numBar === null || numBar <= 10) {\r\n            this.setState({ numOfBar: 10 });\r\n            numBar = 10;\r\n        } else {\r\n            this.setState({ numOfBar: numBar > 250 ? 250 : numBar });\r\n            numBar = numBar > 250 ? 250 : numBar;\r\n        }\r\n        this.createArray(numBar);\r\n    }\r\n    selectAlgo = (e) => {\r\n        this.setState({ sortingAlgorithm: e.target.name });\r\n    }\r\n    startSorting = () => {\r\n        const { sortingAlgorithm } = this.state;\r\n        switch (sortingAlgorithm) {\r\n            case 'QuickSort':\r\n                this.visualizeQuickSort();\r\n                break;\r\n            case 'BubbleSort':\r\n                this.visualizeBubbleSort();\r\n                break;\r\n            case 'SelectionSort':\r\n                this.visualizeSelectionSort();\r\n                break;\r\n            case 'HeapSort':\r\n                this.visualizeHeapSort();\r\n                break;\r\n            case 'MergeSort':\r\n                this.visualizeMergeSort();\r\n                break;\r\n            default:\r\n                alert('Please select Algorithm');\r\n        }\r\n    }\r\n    selectSpeed = (speed) => {\r\n        this.setState({ speed: speed })\r\n    }\r\n    render() {\r\n\r\n        const { arrayNumber, numOfBar } = this.state;\r\n        return (\r\n            <div className=\"SortingVisualizer\">\r\n                <div className=\"navbar\">\r\n                    <Link className=\"navbar-brand\" to='/'>Home</Link>\r\n                    <Link className=\"navbar-brand\" to=\"/SortingVisualizer\">Sorting Visualizer</Link>\r\n                    <ul className=\"nav navbar-nav\">\r\n                        <li className=\"dropdown\">\r\n                            <a className=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">Algorithms</a>\r\n                            <ul className=\"dropdown-menu\" id=\"AlgorithmList\">\r\n                                <li className=\"navbar-nav\">\r\n                                    <a onClick={this.selectAlgo} href=\"#\" name=\"BubbleSort\">Bubble Sort</a>\r\n                                </li>\r\n                                <li className=\"navbar-nav\">\r\n                                    <a onClick={this.selectAlgo} name=\"SelectionSort\" href=\"#\">Selection Sort</a>\r\n                                </li>\r\n                                <li className=\"navbar-nav\">\r\n                                    <a onClick={this.selectAlgo} name=\"HeapSort\" href=\"#\">Heap Sort</a>\r\n                                </li>\r\n                                <li className=\"navbar-nav\">\r\n                                    <a onClick={this.selectAlgo} name=\"MergeSort\" href=\"#\">Merge Sort</a>\r\n                                </li>\r\n                                <li className=\"navbar-nav\">\r\n                                    <a onClick={this.selectAlgo} name=\"QuickSort\" href=\"#\">Quick Sort</a>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            <a className=\"navbar-brand\" onClick={this.startSorting} href=\"#\">Sort</a>\r\n                        </li>\r\n                        <li>\r\n                            <a className=\"dropdow-toggle\" data-toggle=\"dropdown\" href=\"#\">Speed</a>\r\n                            <ul className=\"dropdown-menu\">\r\n                                <li>\r\n                                    <a onClick={() => { this.selectSpeed(30) }} href=\"#\">Fast</a>\r\n                                </li>\r\n                                <li>\r\n                                    <a onClick={() => { this.selectSpeed(60) }} href=\"#\">Medium</a>\r\n                                </li>\r\n                                <li>\r\n                                    <a onClick={() => { this.selectSpeed(100) }} href=\"#\">Slow</a>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                        <li>\r\n                            <a onClick={this.createRandomArray} href=\"#\">Create Random Array</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n                <div>\r\n                    <label>Please insert number of array\r\n                        <input className=\"text\" name=\"numOfBar\" onChange={this.setNumOfBar} value={numOfBar} />\r\n                    </label>\r\n                </div>\r\n                <div className=\"listBarChart\" style={{ width: 1500, height: 500 }}>\r\n                    {arrayNumber.map((bar, barIdx) => {\r\n                        return (\r\n                            <div key={barIdx} id={`bar-${barIdx}`} className=\"barChart\" style={{ width: (1500 / numOfBar), height: bar, }}></div>\r\n                        )\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\nexport default sortingVisualizer;\r\n\r\n","export function newBubbleSort(arr) {\r\n    const animateArr = [];\r\n    for (let i = arr.length-1; i >= 0; i--) {\r\n        for (let j = 0; j < i; j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n                let tmp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = tmp;\r\n            }\r\n            animateArr.push([j,j+1,[...arr]])\r\n        }\r\n        animateArr.push([i, [...arr]])\r\n    }\r\n    return animateArr;\r\n}","export function selectionSortAlgo(arr){\r\n    const animateArr = [];\r\n    for(let i=0; i<arr.length; i++){\r\n        let minIdx = i;\r\n        for(let j=i; j<arr.length; j++){\r\n            if(arr[j]<arr[minIdx]){\r\n                minIdx = j;\r\n            }\r\n            animateArr.push({\r\n                state: 'compare',\r\n                barCompare: [minIdx, j] \r\n            })\r\n        }\r\n        let tmp = arr[i];\r\n        arr[i]= arr[minIdx];\r\n        arr[minIdx] = tmp;\r\n        animateArr.push({\r\n            state: 'done',\r\n            barDone: i,\r\n            newArray: [...arr]\r\n        })\r\n    }\r\n    return animateArr;\r\n\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\r\nimport PathFinding from './pathFinding/PathFinding';\r\nimport Sorting from './SortingVisualize/SortingVisualizer'\r\nimport { PUBLIC_URL } from './Constraint'\r\n\r\nconst BASE_ROUTE = ''\r\nconst NavBar = () => {\r\n  return (\r\n    <div class=\"navbar\">\r\n      <a class=\"navbar-brand\" href='/'>Algorithms Visualizer</a>\r\n      <ul class=\"nav navbar-nav\">\r\n        <li>\r\n          <Link to='/PathFinding'>PathFinding </Link>\r\n        </li>\r\n        <li>\r\n          <Link to='/SortingVisualizer'>Sorting</Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path={`${BASE_ROUTE}/`} component={NavBar} />\r\n          <Route exact path={`${BASE_ROUTE}/PathFinding`} component={PathFinding} />\r\n          <Route exact path={`${BASE_ROUTE}/SortingVisualizer`} component={Sorting} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom'\r\n\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>\r\n    ,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}