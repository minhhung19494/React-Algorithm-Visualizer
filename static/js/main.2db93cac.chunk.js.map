{"version":3,"sources":["pathFinding/GridAndNode/Node.js","algorithms/DijkstraAlgo.js","pathFinding/Dijkstra/DijkstraVisualizer.js","algorithms/DFSAlgo.js","pathFinding/Depth First Search/DFSVisualizer.js","algorithms/BFSAlgo.js","pathFinding/Breadth First Search/BFSVisualizer.js","algorithms/AstarAlgo.js","pathFinding/A star/AStarVisualizer.js","algorithms/GreadyAlgo.js","pathFinding/Gready Best First Search/GreadyBFS.js","algorithms/SwarmAlgo.js","pathFinding/Swarm/SwarmVisualizer.js","Maze/RecursiveDivision.js","pathFinding/GridAndNode/Grid.js","pathFinding/PathFinding.js","SortingVisualize/Algorithm/MergeSort.js","SortingVisualize/Algorithm/QuickSort.js","SortingVisualize/Algorithm/HeapSort.js","SortingVisualize/SortingVisualizer.js","SortingVisualize/Algorithm/BubbleSort.js","SortingVisualize/Algorithm/SelectionSort.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","row","col","this","isStart","isFinish","isWall","onMouseEnter","onMouseLeave","onMouseUp","onMouseDown","isVisited","isWeight","extraClassName","className","id","style","width","window","innerWidth","height","innerHeight","Component","dijskstra","grid","startNode","finishNode","visitedNodeInOrder","unvisistedNode","allNodes","node","push","getAllNodes","distance","length","sortNodeByDistance","closetNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","neighborNodes","neighbors","filter","neighbor","getNeighborNodes","previousNode","visualizeDijkstra","speed","StartNode","FinishNode","NodesinShortestPathOrder","i","setTimeout","console","log","document","getElementById","animateShortestPath","animateDijkstra","nodeInShortestPath","currentNode","unshift","getNodesinShortestPathOrder","DFS","nodeVisited","DFSAlgo","DFSVisualizer","animateNodeInShortestPath","animateDFS","findShortestPath","updateNeighbors","unvisistedNeighbors","getUnvisitedNeighbors","finalNeighbors","visualizeBFS","animateBFS","unvisitedNodeQueue","concat","BFSAlgo","AStarAlgo","unvisitedNode","heuristicDistance","calculateHeuristic","fullDistance","newDistance","calculateUnvisitedDistance","Math","abs","visualizeAStar","animateAStar","greadyBFS","visualizeGreadyBFS","swarmAlgo","calculateDistanceBetweenNodes","swarmIdx","groupBestLocation","sumRow","sumCol","avgRow","round","avgCol","getGroupBestLocation","calculateSwarmIdx","visualizeSwarm","recursiveDivision","orientation","chooseOrientation","wallInOrder","divide","x","y","passNodes","wx","wy","px","py","horizontal","wallCheck","wallCheck2","floor","random","wx1","wy1","map","e","includes","reduce","a","b","j","passCheck","passCheck2","dx","dy","passingFinal","k","Grid","setStartNode","setState","selectingStartNode","selectingFinishNode","setFinishNode","handleMouseDown","mouseIsPress","selectingWeight","handleMouseEnter","handleMouseLeave","handleMouseUp","Dijkstra","visualizeDFS","BFS","AStar","GreadyBFS","swarm","visualizeMaze","createMaze","getInitialGrid","prevProps","resetGrid","newGrid","clearPath","triggerAlgorithm","algorithm","rowIdx","key","nodeIdx","currentRow","createNode","PathFinding","preventDefault","el","getElementsByClassName","classList","remove","clearBoard","selectAlgorithm","target","name","text","algoTitle","triggerAlgo","alert","selectSpeed","selectWeight","checked","event","type","data-toggle","data-target","to","href","aria-labelledby","onClick","onChange","exact","path","mergeSortAlgo","arr","animateArr","mergeSortInPlace","startPoint","endPoint","middlePoint","midPoint","start2","newArray","barCompare","tmpValue","index","merge","quickSortAlgo","quickSortHelper","runningPoint","pivotPoint","comparePoint","finishPoint","pivot","tmp","heapHelper","lengthArray","leftPoint","rightPoint","largestPoint","swap","temp","sortingVisualizer","componentDidMount","createArray","numOfBar","windowWidth","limitBar","ceil","componentDidUpdate","num","arrayNumber","createRandomArray","visualizeBubbleSort","bubbleSort","visualizeSelectionSort","minIdx","barDone","selectionSort","visualizeMergeSort","mergeSort","visualizeQuickSort","quickSort","visualizeHeapSort","n","finish","heapSort","selectAlgo","sortingAlgorithm","algorithmName","startSorting","handleOnChange","noBarCache","value","setNumOfBar","onSubmit","role","placeholder","bar","barIdx","NavBar","App","component","Sorting","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2db93cac.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Node.css'\r\n\r\nclass Node extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            row: this.props.row,\r\n            col: this.props.col\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {\r\n            row,\r\n            col,\r\n            isStart,\r\n            isFinish,\r\n            isWall,\r\n            onMouseEnter,\r\n            onMouseLeave,\r\n            onMouseUp,\r\n            onMouseDown,\r\n            isVisited,\r\n            isWeight,\r\n        } = this.props;\r\n        const extraClassName = isFinish ? 'node-finish' : isStart ? 'node-start' : isWall ? 'node-wall' : isVisited ? 'node-visisted' : isWeight ? 'node-weight':'';\r\n        return(\r\n        <div \r\n            className={`Node ${extraClassName}`} \r\n            onMouseEnter={()=>onMouseEnter(row,col)}\r\n            onMouseDown={()=>onMouseDown(row,col)}\r\n            onMouseUp={()=>onMouseUp(row,col)}\r\n            onMouseLeave={()=>onMouseLeave(row,col)}\r\n            id={`node-${row}-${col}`}\r\n            style={{width:(window.innerWidth-100)/50, height:(window.innerHeight-100)/20}}>\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default Node;","export function dijskstra(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    const unvisistedNode = getAllNodes(grid);\r\n    startNode.distance = 0;\r\n    while (!!unvisistedNode.length) {\r\n        sortNodeByDistance(unvisistedNode)\r\n        const closetNode = unvisistedNode.shift();\r\n        if (closetNode.isWall) continue;\r\n        if (closetNode.distance === Infinity) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        closetNode.isVisited = true;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        updateUnvisitedNeighbors(closetNode, grid);\r\n    };\r\n}\r\n\r\n\r\nfunction sortNodeByDistance(unvisistedNode) {\r\n    unvisistedNode.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n\r\n};\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (const neighbors of neighborNodes) {\r\n        if (neighbors.isWeight) {\r\n            neighbors.distance = node.distance + 15;\r\n        } else {\r\n            neighbors.distance = node.distance + 1;\r\n        }\r\n        neighbors.previousNode = node;\r\n    };\r\n}\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n};\r\n\r\nfunction getAllNodes(grid) {\r\n    const allNodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            allNodes.push(node);\r\n        }\r\n    }\r\n    return allNodes;\r\n};\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n\r\n};","import {dijskstra, getNodesinShortestPathOrder} from './../../algorithms/DijkstraAlgo'\r\n\r\nexport function visualizeDijkstra(grid, startNode, finishNode, speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = dijskstra(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateDijkstra(visitedNodeInOrder, NodesinShortestPathOrder, speed)\r\n};\r\n\r\nexport function animateDijkstra(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            console.log(node);\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function DFS(grid, startNode, finishNode) {\r\n    const nodeVisited = [];\r\n    startNode.distance = 0;\r\n    DFSAlgo(startNode, finishNode, nodeVisited, grid);\r\n    return nodeVisited;\r\n}\r\nfunction DFSAlgo(node, finishNode, nodeVisited, grid) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (let i = 0; i < neighborNodes.length && !finishNode.isVisited; i++) {\r\n        neighborNodes[i].isVisited = true;\r\n        if (neighborNodes[i].isWall) continue;\r\n        if (neighborNodes[i].distance === Infinity) {\r\n            neighborNodes[i].previousNode = node;\r\n            nodeVisited.push(neighborNodes[i])\r\n        }\r\n        if (neighborNodes[i] === finishNode) {\r\n            return neighborNodes[i].previousNode = node;\r\n        };\r\n        console.log(nodeVisited);\r\n        DFSAlgo(neighborNodes[i], finishNode, nodeVisited, grid);\r\n    }\r\n}\r\n\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighborNodes = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighborNodes.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighborNodes.push(grid[row + 1][col]);\r\n    if (col < grid[0].length - 1) neighborNodes.push(grid[row][col + 1]);\r\n    if (col > 0) neighborNodes.push(grid[row][col - 1]);\r\n    return neighborNodes.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nexport function findShortestPath(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n\r\n}","import { DFS, findShortestPath } from './../../algorithms/DFSAlgo'\r\n\r\nexport function DFSVisualizer(grid, startNode, finishNode, speed) {\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const nodeVisited = DFS(grid, StartNode, FinishNode);\r\n    const nodeInShortestPath = findShortestPath(FinishNode);\r\n    animateDFS(nodeVisited, nodeInShortestPath, speed);\r\n}\r\nfunction animateDFS(nodeVisited, nodeInShortestPath, speed) {\r\n    for (let i = 0; i <= nodeVisited.length-1; i++) {\r\n        if (i === nodeVisited.length -1) {\r\n            setTimeout(()=>animateNodeInShortestPath(nodeInShortestPath, speed), speed*i);\r\n            return\r\n            }\r\n        const node= nodeVisited[i];\r\n        setTimeout(() => {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited'\r\n        }, speed * i);\r\n    }\r\n\r\n}\r\nfunction animateNodeInShortestPath(nodeInShortestPath, speed){\r\n    for(let i =0; i<nodeInShortestPath.length; i++){\r\n        const node = nodeInShortestPath[i];\r\n        setTimeout(()=>{\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i)\r\n    }\r\n}","export function BFSAlgo(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    startNode.distance = 0;\r\n    startNode.isVisited = true;\r\n    let unvisitedNodeQueue = [];\r\n    unvisitedNodeQueue.push(startNode);\r\n    while (!!unvisitedNodeQueue.length) {\r\n        const closetNode = unvisitedNodeQueue.shift();\r\n        if (closetNode.isWall) continue;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        };\r\n        const finalNeighbors = updateNeighbors(closetNode, grid);\r\n        unvisitedNodeQueue=unvisitedNodeQueue.concat(finalNeighbors);\r\n    }\r\n    return visitedNodeInOrder;\r\n}\r\nfunction updateNeighbors(node, grid) {\r\n    const unvisistedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    const finalNeighbors = []\r\n    for (const neighbors of unvisistedNeighbors) {\r\n        neighbors.distance = node.distance + 1;\r\n        neighbors.previousNode = node;\r\n        neighbors.isVisited = true;\r\n        finalNeighbors.push(neighbors);\r\n    };\r\n    return finalNeighbors;\r\n}\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n};\r\n\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n\r\n}","import {BFSAlgo, getNodesinShortestPathOrder} from '../../algorithms/BFSAlgo'\r\n\r\nexport function visualizeBFS(grid, startNode, finishNode, speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = BFSAlgo(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateBFS(visitedNodeInOrder, NodesinShortestPathOrder, speed);\r\n};\r\n\r\nexport function animateBFS(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function AStarAlgo(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    const unvisitedNode = getAllNodes(grid);\r\n    startNode.distance = 0;\r\n    startNode.heuristicDistance = calculateHeuristic(startNode, finishNode);\r\n    startNode.fullDistance = startNode.distance +startNode.heuristicDistance;\r\n    while (!!unvisitedNode.length) {\r\n        sortNodeByDistance(unvisitedNode)\r\n        const closetNode = unvisitedNode.shift();\r\n        if (closetNode.isWall) continue;\r\n        if (closetNode.distance === Infinity) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        closetNode.isVisited = true;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        updateUnvisitedNeighbors(closetNode, grid, finishNode);\r\n    };\r\n}\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (const neighbors of neighborNodes) {\r\n        if (neighbors.isVisited) {\r\n            let newDistance = null;\r\n            let heuristicDistance = calculateHeuristic(neighbors, finishNode);\r\n            if (neighbors.isWeight) {\r\n                newDistance = node.distance + 15;\r\n            } else {\r\n                newDistance = node.distance + 1;\r\n            }\r\n            if (neighbors.distance > newDistance) {\r\n                neighbors.distance = newDistance;\r\n                neighbors.fullDistance = newDistance + heuristicDistance;\r\n                neighbors.previousNode = node;\r\n            }\r\n        } else {\r\n            calculateUnvisitedDistance(neighbors, node, finishNode);\r\n            neighbors.previousNode = node;\r\n        };\r\n    }\r\n}\r\nfunction calculateUnvisitedDistance(neighbors, node, finishNode) {\r\n    neighbors.heuristicDistance = calculateHeuristic(neighbors, finishNode);\r\n    if (neighbors.isWeight) {\r\n        neighbors.distance = node.distance + 15;\r\n    } else {\r\n        neighbors.distance = node.distance + 1;\r\n    }\r\n    neighbors.fullDistance = neighbors.distance + neighbors.heuristicDistance;\r\n}\r\n\r\nfunction calculateHeuristic(node, finishNode) {\r\n    let heuristicDistance = null;\r\n    const row = Math.abs(finishNode.row - node.row);\r\n    const col = Math.abs(finishNode.col - node.col);\r\n    heuristicDistance = row + col;\r\n    return heuristicDistance;\r\n}\r\n\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors;\r\n};\r\n\r\nfunction sortNodeByDistance(unvisitedNode) {\r\n    unvisitedNode.sort((nodeA, nodeB) => nodeA.fullDistance - nodeB.fullDistance);\r\n}\r\nfunction getAllNodes(grid) {\r\n    const allNodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            allNodes.push(node);\r\n        }\r\n    }\r\n    return allNodes;\r\n};\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n}","import {AStarAlgo, getNodesinShortestPathOrder} from './../../algorithms/AstarAlgo'\r\n\r\nexport function visualizeAStar(grid, startNode, finishNode,speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = AStarAlgo(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed);\r\n};\r\n\r\nexport function animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function greadyBFS(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    const unvisitedNode = getAllNodes(grid);\r\n    startNode.distance = 0;\r\n    startNode.heuristicDistance = calculateHeuristic(startNode, finishNode);\r\n    startNode.fullDistance = startNode.distance +startNode.heuristicDistance;\r\n    while (!!unvisitedNode.length) {\r\n        sortNodeByDistance(unvisitedNode)\r\n        const closetNode = unvisitedNode.shift();\r\n        if (closetNode.isWall) continue;\r\n        if (closetNode.distance === Infinity) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        closetNode.isVisited = true;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        updateUnvisitedNeighbors(closetNode, grid, finishNode);\r\n    };\r\n}\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (const neighbors of neighborNodes) {\r\n        if (neighbors.isVisited) {\r\n            let newDistance = null;\r\n            let heuristicDistance = calculateHeuristic(neighbors, finishNode);\r\n            if (neighbors.isWeight) {\r\n                newDistance = node.distance + 15;\r\n            } else {\r\n                newDistance = node.distance + 1;\r\n            }\r\n            if (neighbors.distance > newDistance) {\r\n                neighbors.distance = newDistance;\r\n                neighbors.fullDistance = newDistance + heuristicDistance;\r\n                neighbors.previousNode = node;\r\n            }\r\n        } else {\r\n            calculateUnvisitedDistance(neighbors, node, finishNode);\r\n            neighbors.previousNode = node;\r\n        };\r\n    }\r\n}\r\nfunction calculateUnvisitedDistance(neighbors, node, finishNode) {\r\n    neighbors.heuristicDistance = calculateHeuristic(neighbors, finishNode);\r\n    if (neighbors.isWeight) {\r\n        neighbors.distance = node.distance + 15;\r\n    } else {\r\n        neighbors.distance = node.distance + 1;\r\n    }\r\n    neighbors.fullDistance = neighbors.distance + neighbors.heuristicDistance;\r\n}\r\n\r\nfunction calculateHeuristic(node, finishNode) {\r\n    let heuristicDistance = null;\r\n    const row = Math.abs(finishNode.row - node.row);\r\n    const col = Math.abs(finishNode.col - node.col);\r\n    heuristicDistance = row + col;\r\n    return heuristicDistance;\r\n}\r\n\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors;\r\n};\r\n\r\nfunction sortNodeByDistance(unvisitedNode) {\r\n    unvisitedNode.sort((nodeA, nodeB) => nodeA.heuristicDistance - nodeB.heuristicDistance);\r\n}\r\nfunction getAllNodes(grid) {\r\n    const allNodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            allNodes.push(node);\r\n        }\r\n    }\r\n    return allNodes;\r\n};\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n}\r\n","import {greadyBFS, getNodesinShortestPathOrder} from './../../algorithms/GreadyAlgo'\r\n\r\nexport function visualizeGreadyBFS(grid, startNode, finishNode, speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = greadyBFS(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed);\r\n};\r\n\r\nexport function animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function swarmAlgo(grid, startNode, finishNode) {\r\n    const visitedNodeInOrder = [];\r\n    const unvisitedNode = getAllNodes(grid);\r\n    startNode.distance = 0;\r\n    startNode.heuristicDistance = calculateDistanceBetweenNodes(startNode, finishNode);\r\n    startNode.swarmIdx = 0;\r\n    startNode.fullDistance = startNode.distance + 0.2 * startNode.heuristicDistance + 0.15 * startNode.swarmIdx;\r\n    while (!!unvisitedNode.length) {\r\n        sortNodeByDistance(unvisitedNode)\r\n        const closetNode = unvisitedNode.shift();\r\n        if (closetNode.isWall) continue;\r\n        if (closetNode.distance === Infinity) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        closetNode.isVisited = true;\r\n        visitedNodeInOrder.push(closetNode);\r\n        if (closetNode === finishNode) {\r\n            return visitedNodeInOrder;\r\n        }\r\n        updateUnvisitedNeighbors(closetNode, grid, finishNode, visitedNodeInOrder);\r\n    };\r\n}\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode, visitedNodeInOrder) {\r\n    const neighborNodes = getNeighborNodes(node, grid);\r\n    for (const neighbors of neighborNodes) {\r\n        calculateUnvisitedDistance(neighbors, node, finishNode, visitedNodeInOrder);\r\n        neighbors.previousNode = node;\r\n    }\r\n}\r\nfunction calculateUnvisitedDistance(neighbors, node, finishNode, visitedNodeInOrder) {\r\n    neighbors.heuristicDistance = calculateDistanceBetweenNodes(neighbors, finishNode);\r\n    neighbors.swarmIdx = calculateSwarmIdx(neighbors, visitedNodeInOrder, finishNode);\r\n    if (neighbors.isWeight) {\r\n        neighbors.distance = node.distance + 15;\r\n    } else {\r\n        neighbors.distance = node.distance + 1;\r\n    }\r\n    neighbors.fullDistance = neighbors.distance + 0.2 * neighbors.heuristicDistance + 0.15 * neighbors.swarmIdx;\r\n}\r\nfunction calculateSwarmIdx(node, visitedNodeInOrder, finishNode) {\r\n    const groupBestLocation = getGroupBestLocation(visitedNodeInOrder, finishNode);\r\n    const swarmIdx = calculateDistanceBetweenNodes(node, groupBestLocation);\r\n    return swarmIdx;\r\n}\r\n\r\nfunction getGroupBestLocation(visitedNodeInOrder, finishNode) {\r\n    let sumRow = null;\r\n    let sumCol = null;\r\n    for (const node of visitedNodeInOrder) {\r\n        sumRow += node.row;\r\n        sumCol += node.col;\r\n    }\r\n    const avgRow = Math.round(((sumRow / visitedNodeInOrder.length) + finishNode.row) / 2);\r\n    const avgCol = Math.round(((sumCol / visitedNodeInOrder.length) + finishNode.col) / 2);\r\n    const groupBestLocation = {\r\n        row: avgRow,\r\n        col: avgCol,\r\n    }\r\n    return groupBestLocation\r\n}\r\n\r\nfunction calculateDistanceBetweenNodes(nodeA, nodeB) {\r\n    let heuristicDistance = null;\r\n    const row = Math.abs(nodeB.row - nodeA.row);\r\n    const col = Math.abs(nodeB.col - nodeA.col);\r\n    heuristicDistance = row + col;\r\n    return heuristicDistance;\r\n}\r\n\r\nfunction getNeighborNodes(node, grid) {\r\n    const neighbors = [];\r\n    const { row, col } = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n};\r\n\r\nfunction sortNodeByDistance(unvisitedNode) {\r\n    unvisitedNode.sort((nodeA, nodeB) => nodeA.fullDistance - nodeB.fullDistance);\r\n}\r\nfunction getAllNodes(grid) {\r\n    const allNodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            allNodes.push(node);\r\n        }\r\n    }\r\n    return allNodes;\r\n};\r\nexport function getNodesinShortestPathOrder(finishNode) {\r\n    const nodeInShortestPath = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodeInShortestPath.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodeInShortestPath;\r\n}","import {swarmAlgo, getNodesinShortestPathOrder} from './../../algorithms/SwarmAlgo'\r\n\r\nexport function visualizeSwarm(grid, startNode, finishNode, speed){\r\n    const StartNode = grid[startNode.row][startNode.col];\r\n    const FinishNode = grid[finishNode.row][finishNode.col];\r\n    const visitedNodeInOrder = swarmAlgo(grid, StartNode, FinishNode);\r\n    const NodesinShortestPathOrder = getNodesinShortestPathOrder(FinishNode);\r\n    animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed);\r\n};\r\n\r\nexport function animateAStar(visitedNodeInOrder, NodesinShortestPathOrder, speed){\r\n    for(let i =0; i <= visitedNodeInOrder.length; i++){\r\n        if(i===visitedNodeInOrder.length){\r\n            setTimeout(()=>{animateShortestPath(NodesinShortestPathOrder, speed)}, speed*i);\r\n            return;\r\n            };\r\n        setTimeout(()=>{\r\n            const node = visitedNodeInOrder[i];\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-visited';\r\n        }, speed*i);\r\n}}\r\n\r\nexport function animateShortestPath(NodesinShortestPathOrder, speed){\r\n    for(let i=0; i<NodesinShortestPathOrder.length; i++){\r\n        setTimeout(()=>{\r\n            const node = NodesinShortestPathOrder[i];\r\n            console.log(node);\r\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-shortest-path'\r\n        }, speed*i);\r\n    }\r\n}","export function recursiveDivision(grid, startNode, finishNode) {\r\n    let orientation = chooseOrientation(grid[0].length, grid.length);\r\n    const wallInOrder = [];\r\n    const passNodes = [];\r\n\r\n    for (let i = 0; i < grid[0].length; i++) {\r\n        wallInOrder.push(grid[0][i]);\r\n        wallInOrder.push(grid[grid.length - 1][i])\r\n    }\r\n    for (let i = 1; i < grid.length - 1; i++) {\r\n        wallInOrder.push(grid[i][0]);\r\n        wallInOrder.push(grid[i][grid[0].length - 1]);\r\n    }\r\n    for (let i = 0; i < wallInOrder.length; i++) {\r\n        wallInOrder[i].isWall = true;\r\n    }\r\n    divide(grid, 0, 0, grid[0].length - 2, grid.length - 2, orientation, wallInOrder, passNodes);\r\n    return wallInOrder;\r\n}\r\nfunction chooseOrientation(width, height) {\r\n    let orientation;\r\n    if (width < height) {\r\n        orientation = 'HORIZONTAL';\r\n    } else if (height < width) {\r\n        orientation = 'VERTICAL';\r\n    } else {\r\n        orientation = (Math.random() > 0.5) ? 'HORIZONTAL' : 'VERTICAL'\r\n    };\r\n    return orientation\r\n}\r\nfunction divide(grid, x, y, width, height, orientation, wallInOrder, passNodes) {\r\n    if (width < 2 || height < 2 || (width === 2 && height === 2)) return;\r\n    let horizontal = orientation === 'HORIZONTAL';\r\n    let wallCheck = [];\r\n    let wallCheck2 = [];\r\n    let wx;\r\n    let wy;\r\n    let i = 0;\r\n\r\n    do {\r\n        wallCheck = [orientation];\r\n        wallCheck2 = [orientation];\r\n        wx = x + (horizontal ? 0 : Math.floor(Math.random() * (width - 3) + 2));\r\n        wy = y + (horizontal ? Math.floor(Math.random() * (height - 3) + 2) : 0);\r\n        let wx1 = wx + width + 1;\r\n        let wy1 = wy + height + 1;\r\n        i++;\r\n        horizontal ? wallCheck2.push(wx1, wy) : wallCheck2.push(wx, wy1);\r\n        wallCheck.push(wx, wy);\r\n        // console.log(passNodes.map(e => e.includes(...wallCheck)));\r\n        // console.log(passNodes.map(e => e.includes(...wallCheck2)));\r\n        // console.log(i);\r\n\r\n    }\r\n    while (i < 100 && (passNodes.map(e => e.includes(...wallCheck)).reduce((a, b) => a + b, 0) > 0 || passNodes.map(e => e.includes(...wallCheck2)).reduce((a, b) => a + b, 0) > 0))\r\n\r\n    let px;\r\n    let py;\r\n    let j = 0;\r\n    if (i === 100) {\r\n        let passCheck = [];\r\n        let passCheck2 = [];\r\n        do {\r\n            passCheck = [orientation];\r\n            passCheck2 = [orientation];\r\n            px = wx + (horizontal ? Math.floor(Math.random() * (width - 1) + 1) : 0);\r\n            py = wy + (horizontal ? 0 : Math.floor(Math.random() * (height - 1) + 1));\r\n            if (horizontal) {\r\n                passCheck.push(px + 1, py)\r\n                passCheck2.push(px - 1, py);\r\n            } else {\r\n                passCheck.push(px, py + 1);\r\n                passCheck.push(px, py - 1);\r\n            }\r\n            j++;\r\n            // console.log(\"Day la \" + j);\r\n        } while (j < 10 && !(passNodes.map(e => e.includes(...passCheck)).reduce((a, b) => a + b, 0) > 0) && !(passNodes.map(e => e.includes(...passCheck2)).reduce((a, b) => a + b, 0) > 0))\r\n    } else {\r\n        px = wx + (horizontal ? Math.floor(Math.random() * (width - 1) + 1) : 0);\r\n        py = wy + (horizontal ? 0 : Math.floor(Math.random() * (height - 1) + 1));\r\n    }\r\n    let length = horizontal ? width : height;\r\n    let dx = horizontal ? 1 : 0;\r\n    let dy = horizontal ? 0 : 1;\r\n\r\n    let passingFinal = [horizontal ? \"VERTICAL\" : \"HORIZONTAL\", px, py];\r\n    console.log(passNodes);\r\n    passNodes.push(passingFinal);\r\n    console.log(passingFinal);\r\n    console.log(passNodes);\r\n    if (j !== 10) {\r\n        for (let k = 0; k < length; k++) {\r\n            wx += dx;\r\n            wy += dy;\r\n            if (wx !== px || wy !== py) {\r\n                grid[wy][wx].isWall = true;\r\n                wallInOrder.push(grid[wy][wx]);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (horizontal) {\r\n        divide(grid, x, y, width, wy - y - 1, chooseOrientation(width, wy - y - 1), wallInOrder, passNodes);\r\n        divide(grid, x, wy, width, y + height - wy, chooseOrientation(width, y + height - wy), wallInOrder, passNodes);\r\n    } else {\r\n        divide(grid, x, y, wx - x - 1, height, chooseOrientation(wx - x - 1, height), wallInOrder, passNodes);\r\n        divide(grid, wx, y, x + width - wx, height, chooseOrientation(x + width - wx, height), wallInOrder, passNodes);\r\n    }\r\n};\r\n\r\n\r\n ","import React, { Component } from 'react';\r\nimport Node from './Node'\r\nimport './Grid.css'\r\nimport { visualizeDijkstra as Dijkstra } from '../Dijkstra/DijkstraVisualizer'\r\nimport { DFSVisualizer as DFS } from '../Depth First Search/DFSVisualizer'\r\nimport { visualizeBFS as BFS } from '../Breadth First Search/BFSVisualizer';\r\nimport { visualizeAStar as AStar } from '../A star/AStarVisualizer';\r\nimport { visualizeGreadyBFS as GreadyBFS } from '../Gready Best First Search/GreadyBFS';\r\nimport { visualizeSwarm as swarm } from '../Swarm/SwarmVisualizer';\r\nimport { recursiveDivision as createMaze } from '../../Maze/RecursiveDivision';\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grid: [],\r\n            mouseIsPress: false,\r\n            selectingStartNode: false,\r\n            selectingFinishNode: false,\r\n            startNode: { row: 10, col: 15 },\r\n            finishNode: { row: 10, col: 40 },\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });\r\n        const { startNode, finishNode } = this.state;\r\n        this.props.startNode.row = startNode.row;\r\n        this.props.startNode.col = startNode.col;\r\n        this.props.finishNode.row = finishNode.row;\r\n        this.props.finishNode.col = finishNode.col;\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.resetGrid !== this.props.resetGrid) {\r\n            const newGrid = getInitialGrid();\r\n            this.setState({\r\n                grid: newGrid,\r\n                startNode: { row: 10, col: 15 },\r\n                finishNode: { row: 10, col: 40 },\r\n            });\r\n        }\r\n        if (prevProps.clearPath !== this.props.clearPath) {\r\n            const { grid } = this.state;\r\n            grid.map((row) => {\r\n                row.map((node) => {\r\n                    node.distance = Infinity;\r\n                    node.previousNode = null;\r\n                    node.isVisited = false;\r\n                    node.heuristicDistance = Infinity;\r\n                    node.swarmIdx = Infinity;\r\n                    node.fullDistance = Infinity;\r\n                    return;\r\n                })\r\n            })\r\n        }\r\n        if (prevProps.triggerAlgorithm !== this.props.triggerAlgorithm) {\r\n            switch (this.props.algorithm) {\r\n                case 'Dijkstra':\r\n                    this.visualizeDijkstra(this.props.speed);\r\n                    break;\r\n                case 'AStar':\r\n                    this.visualizeAStar(this.props.speed);\r\n                    break;\r\n                case 'Depth First Search':\r\n                    this.visualizeDFS(this.props.speed);\r\n                    break;\r\n                case 'BFS':\r\n                    this.visualizeBFS(this.props.speed);\r\n                    break;\r\n                case 'GreadyBFS':\r\n                    this.visualizeGreadyBFS(this.props.speed);\r\n                    break;\r\n                case 'Swarm':\r\n                    this.visualizeSwarm(this.props.speed);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    setStartNode = () => {\r\n        this.setState({ selectingStartNode: true });\r\n        this.setState({ selectingFinishNode: false });\r\n    }\r\n    setFinishNode = () => {\r\n        this.setState({ selectingFinishNode: true });\r\n        this.setState({ selectingStartNode: false });\r\n    }\r\n\r\n    handleMouseDown = (row, col) => {\r\n        const { grid } = this.state\r\n        this.state.mouseIsPress = true;\r\n        if (row === this.state.startNode.row && col === this.state.startNode.col) {\r\n            this.setState({ selectingStartNode: true });\r\n            return\r\n        };\r\n        if (row === this.state.finishNode.row && col === this.state.finishNode.col) {\r\n            this.setState({ selectingFinishNode: true });\r\n            return\r\n        };\r\n\r\n        if (this.props.selectingWeight) {\r\n            grid[row][col].isWeight = !this.state.grid[row][col].isWeight;\r\n            if (document.getElementById(`node-${row}-${col}`).className === 'Node node-weight') {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            } else {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node node-weight';\r\n            }\r\n            return\r\n        } else {\r\n            grid[row][col].isWall = !this.state.grid[row][col].isWall;\r\n            if (document.getElementById(`node-${row}-${col}`).className === 'Node node-wall') {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            } else {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node node-wall';\r\n            }\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n    handleMouseEnter = (row, col) => {\r\n        const { grid, startNode, finishNode } = this.state\r\n        if (this.state.selectingStartNode) {\r\n            grid[row][col].isStart = true;\r\n            startNode.row = row;\r\n            startNode.col = col;\r\n            this.props.startNode.row = row;\r\n            this.props.startNode.col = col\r\n            document.getElementById(`node-${row}-${col}`).className = 'Node node-start'\r\n            return;\r\n        }\r\n        if (this.state.selectingFinishNode) {\r\n            grid[row][col].isFinish = true;\r\n            finishNode.row = row;\r\n            finishNode.col = col;\r\n            this.props.finishNode.row = row;\r\n            this.props.finishNode.col = col\r\n            document.getElementById(`node-${row}-${col}`).className = 'Node node-finish'\r\n            return;\r\n        }\r\n        if (this.props.selectingWeight && this.state.mouseIsPress) {\r\n            grid[row][col].isWeight = !this.state.grid[row][col].isWeight;\r\n            if (document.getElementById(`node-${row}-${col}`).className === 'Node node-weight') {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            } else {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node node-weight';\r\n            }\r\n            return;\r\n        }\r\n        if (this.state.mouseIsPress) {\r\n            grid[row][col].isWall = !this.state.grid[row][col].isWall;\r\n            if (document.getElementById(`node-${row}-${col}`).className === 'Node node-wall') {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            } else {\r\n                document.getElementById(`node-${row}-${col}`).className = 'Node node-wall';\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    handleMouseLeave = (row, col) => {\r\n        const { grid } = this.state\r\n        if (this.state.selectingStartNode) {\r\n            grid[row][col].isStart = false;\r\n            document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            return\r\n        }\r\n        if (this.state.selectingFinishNode) {\r\n            grid[row][col].isFinish = false;\r\n            document.getElementById(`node-${row}-${col}`).className = 'Node'\r\n            return\r\n        }\r\n    }\r\n    handleMouseUp = (row, col) => {\r\n        this.state.mouseIsPress = false;\r\n        this.state.selectingStartNode = false;\r\n        this.state.selectingFinishNode = false;\r\n    }\r\n\r\n    visualizeDijkstra = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        Dijkstra(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeDFS = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        DFS(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeBFS = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        BFS(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeAStar = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        AStar(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeGreadyBFS = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        GreadyBFS(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeSwarm = (speed) => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        swarm(grid, startNode, finishNode, speed);\r\n    }\r\n    visualizeMaze = () => {\r\n        const { grid, startNode, finishNode } = this.state;\r\n        const wallInOrder = [...createMaze(grid, startNode, finishNode)];\r\n        for (let i = 0; i < wallInOrder.length; i++) {\r\n            setTimeout(() => {\r\n                const node = wallInOrder[i];\r\n                document.getElementById(`node-${node.row}-${node.col}`).className = 'Node node-wall';\r\n            }, 50 * i)\r\n        };\r\n    }\r\n    render() {\r\n        const { grid } = this.state;\r\n        return (\r\n            <div className=\"grid\">\r\n                {grid.map((row, rowIdx) => {\r\n                    return (\r\n                        <div key={rowIdx} className=\"Row\">\r\n                            {row.map((node, nodeIdx) => {\r\n                                const { row, col, isFinish, isStart, isWall, isWeight } = node;\r\n                                return (\r\n                                    <Node\r\n                                        key={nodeIdx}\r\n                                        row={row}\r\n                                        col={col}\r\n                                        isFinish={isFinish}\r\n                                        isStart={isStart}\r\n                                        isWall={isWall}\r\n                                        isWeight={isWeight}\r\n                                        onMouseEnter={this.handleMouseEnter}\r\n                                        onMouseDown={this.handleMouseDown}\r\n                                        onMouseUp={this.handleMouseUp}\r\n                                        onMouseLeave={this.handleMouseLeave}\r\n                                    ></Node>\r\n                                );\r\n                            })\r\n                            }\r\n                        </div>\r\n                    );\r\n                })\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\nexport default Grid;\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 50; col++) {\r\n            currentRow.push(createNode(row, col));\r\n        };\r\n        grid.push(currentRow);\r\n    };\r\n    return grid;\r\n}\r\n\r\nconst createNode = (row, col) => {\r\n    return {\r\n        row,\r\n        col,\r\n        isStart: row === 10 && col === 15 ? true : false,\r\n        isFinish: row === 10 && col === 40 ? true : false,\r\n        isWall: false,\r\n        distance: Infinity,\r\n        previousNode: null,\r\n        isVisited: false,\r\n        isWeight: false,\r\n        heuristicDistance: Infinity,\r\n        swarmIdx: Infinity,\r\n        fullDistance: Infinity,\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './PathFinding.css';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport Grid from './GridAndNode/Grid'\r\nimport Switch from 'react-switch'\r\n\r\n\r\nclass PathFinding extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      algorithm: null,\r\n      algoTitle: null,\r\n      triggerAlgorithm: false,\r\n      resetGrid: false,\r\n      speed: 20,\r\n      selectingWeight: false,\r\n      startNode:{},\r\n      finishNode:{},\r\n      clearPath: false\r\n    }\r\n  }\r\n\r\n  clearPath = (e) => {\r\n    e.preventDefault()\r\n    const {startNode, finishNode, clearPath} = this.state\r\n    var el = document.getElementsByClassName('Node');\r\n    for (let i = 0; i < el.length; i++) {\r\n      el[i].classList.remove('node-visited', 'node-shortest-path');\r\n    }\r\n    document.getElementById(`node-${startNode.row}-${startNode.col}`).className = 'Node node-start';\r\n    document.getElementById(`node-${finishNode.row}-${finishNode.col}`).className = 'Node node-finish';\r\n    this.setState({clearPath: !clearPath});\r\n  }\r\n  clearBoard = (e) => {\r\n    e.preventDefault()\r\n    const { resetGrid } = this.state\r\n    var el = document.getElementsByClassName('Node');\r\n    for (let i = 0; i < el.length; i++) {\r\n      el[i].classList.remove('node-visited', 'node-shortest-path', 'node-start', 'node-finish', 'node-wall', 'node-weight');\r\n    }\r\n    document.getElementById(`node-10-15`).className = 'Node node-start';\r\n    document.getElementById(`node-10-40`).className = 'Node node-finish';\r\n    this.setState({ resetGrid: !resetGrid });\r\n  }\r\n  selectAlgorithm = (e) => {\r\n    e.preventDefault();\r\n    const { name , text} = e.target;\r\n    this.setState({ algorithm: name, algoTitle: text })\r\n  }\r\n  triggerAlgo = (e) => {\r\n    if (window.innerWidth < 1250) {\r\n      e.preventDefault();\r\n    }\r\n    const { triggerAlgorithm, algorithm } = this.state\r\n    if (algorithm === null) {\r\n      alert(\"Please select algorithm\")\r\n      return\r\n    }\r\n    this.setState({ triggerAlgorithm: !triggerAlgorithm });\r\n  }\r\n  selectSpeed = (e) => {\r\n    e.preventDefault()\r\n    const { name } = e.target\r\n    switch (name) {\r\n      case 'fast':\r\n        this.setState({ speed: 30 });\r\n        break;\r\n      case 'medium':\r\n        this.setState({ speed: 60 });\r\n        break;\r\n      case 'slow':\r\n        this.setState({ speed: 100 });\r\n        break;\r\n    }\r\n  }\r\n  selectWeight = (checked, event, id) => {\r\n    this.setState({ selectingWeight: checked });\r\n  }\r\n  render() {\r\n    const { algorithm, triggerAlgorithm, resetGrid, speed, selectingWeight, startNode, finishNode, clearPath, algoTitle } = this.state;\r\n    return (\r\n      <div className=\"Container\">\r\n        <nav className=\"navbar navbar-inverse\">\r\n          <div className='container-fluid'>\r\n            <div className=\"navbar-header\">\r\n              <button type=\"button\" className=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavBar\">\r\n                <span className=\"icon-bar\"></span>\r\n                <span className=\"icon-bar\"></span>\r\n                <span className=\"icon-bar\"></span>\r\n              </button>\r\n              <Link className=\"navbar-brand\" to='/'>Home</Link>\r\n              <Link className=\"navbar-brand\" to=\"/SortingVisualizer\">Sorting Visualizer</Link>\r\n            </div>\r\n            <div className=\"collapse navbar-collapse\" id=\"myNavBar\">\r\n              <ul className=\"nav navbar-nav\" >\r\n                <li className=\"nav-item small-tag dropdown\">\r\n                  <a className=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" id=\"navbarDropdownMenuLink\" href=\"#\">Algorithms <span className='caret'></span></a>\r\n                  <ul className=\"dropdown-menu\" id=\"AlgorithmList\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n                    <li><a className=\"dropdow-item\" onClick={this.selectAlgorithm} name=\"Dijkstra\" href=\"#\">Dijkstra</a></li>\r\n                    <li><a className=\"dropdow-item\" onClick={this.selectAlgorithm} name=\"Depth First Search\" href=\"#\">Depth First Search (*)</a></li>\r\n                    <li><a className=\"dropdow-item\" onClick={this.selectAlgorithm} name=\"BFS\" href=\"#\">Breadth First Search (*)</a></li>\r\n                    <li><a className=\"dropdow-item\" onClick={this.selectAlgorithm} name=\"AStar\" href=\"#\">A star</a></li>\r\n                    <li><a className=\"dropdow-item\" onClick={this.selectAlgorithm} name=\"GreadyBFS\" href=\"#\">Gready Best First Search</a></li>\r\n                    <li><a className=\"dropdow-item\" onClick={this.selectAlgorithm} name=\"Swarm\" href=\"#\">Swarm</a></li>\r\n                  </ul>\r\n                </li>\r\n                <li className='nav-item'>\r\n                  <a data-toggle=\"dropdown\" href=\"#\">Select Speed<span className=\"caret\"></span></a>\r\n                  <ul className=\"nav-item small-tag dropdown-menu\">\r\n                    <li><a className=\"dropdow-item\" onClick={this.selectSpeed} name='fast' href=\"#\">Fast</a></li>\r\n                    <li><a className=\"dropdow-item\" onClick={this.selectSpeed} name='medium' href=\"#\">Medium</a></li>\r\n                    <li><a className=\"dropdow-item\" onClick={this.selectSpeed} name='slow' href=\"#\">Slow</a></li>\r\n                  </ul>\r\n                </li>\r\n                <li className='nav-item main-btn'>\r\n                  <a onClick={this.triggerAlgo} data-toggle=\"collapse\" href={window.innerWidth < 1250 ? \"#myNavBar\" : \"#\"}>{!algorithm ? 'Please Pick Algorithm' : 'Visualize ' + algoTitle} </a>\r\n                </li>\r\n                <li className='nav-item small-tag'>\r\n                  <a onClick={this.clearBoard} href=\"#\">ClearBoard</a>\r\n                </li>\r\n                <li className='nav-item small-tag'>\r\n                  <a onClick={this.clearPath} href=\"#\">Clear Path</a>\r\n                </li>\r\n\r\n                <li className='nav-item select-weight' >\r\n                  <div className=\"selectDiv\">\r\n                    <div className=\"text-inline col-md-9\">\r\n                      <label >Select Weight</label>\r\n                    </div>\r\n                    <div className=\"Box col-md-3\">\r\n                      <Switch\r\n                        onChange={this.selectWeight}\r\n                        checked={selectingWeight}\r\n                        id=\"normal-switch\"\r\n                        className=\"checkbox\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n        <Route exact path=\"/PathFinding\">\r\n          <Grid\r\n            triggerAlgorithm={triggerAlgorithm}\r\n            algorithm={algorithm}\r\n            algoTitle={algoTitle}\r\n            resetGrid={resetGrid}\r\n            clearPath={clearPath}\r\n            speed={speed}\r\n            selectingWeight={selectingWeight}\r\n            startNode ={startNode}\r\n            finishNode={finishNode}\r\n          ></Grid>\r\n        </Route>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathFinding;","export function mergeSortAlgo(arr) {\r\n    const animateArr = [];\r\n    // const addArray = [...arr]; when use merSortWithAddArray\r\n    mergeSortInPlace(arr, 0, arr.length - 1, animateArr);\r\n    return animateArr;\r\n}\r\nfunction mergeSortWithAddArray(arr, addArray, startPoint, endPoint, animateArr) {\r\n    if (startPoint === endPoint) { return }\r\n    let middlePoint = (endPoint - startPoint + 1) / 2;\r\n    let newStart = Math.ceil(endPoint - middlePoint + 1);\r\n    let newEnd = Math.ceil(startPoint + middlePoint - 1);\r\n    console.log(startPoint, newEnd, newStart, endPoint);\r\n    mergeSortWithAddArray(arr, addArray, startPoint, newEnd, animateArr);\r\n    mergeSortWithAddArray(arr, addArray, newStart, endPoint, animateArr);\r\n    let j = newStart;\r\n    let i = startPoint;\r\n    for (let idx = startPoint; idx <= endPoint; idx++) {\r\n        if (arr[j] <= arr[i] && j <= endPoint && i <= newEnd) {\r\n            addArray[idx] = arr[j];\r\n            animateArr.push({\r\n                newArray: [...addArray],\r\n                barCompare: [i, j]\r\n            });\r\n            j++;\r\n        } else if (arr[i] <= arr[j] && i <= newEnd && j <= endPoint) {\r\n            addArray[idx] = arr[i];\r\n            animateArr.push({\r\n                newArray: [...addArray],\r\n                barCompare: [i, j]\r\n            });\r\n            i++;\r\n        } else if (i > newEnd) {\r\n            addArray[idx] = arr[j];\r\n            animateArr.push({\r\n                newArray: [...addArray],\r\n                barCompare: [i - 1, j]\r\n            });\r\n            j++;\r\n        } else if (j > endPoint) {\r\n            addArray[idx] = arr[i];\r\n            animateArr.push({\r\n                newArray: [...addArray],\r\n                barCompare: [i, j - 1]\r\n            });\r\n            i++;\r\n        }\r\n    }\r\n    for (let k = startPoint; k <= endPoint; k++) {\r\n        arr[k] = addArray[k];\r\n    }\r\n}\r\nfunction mergeSortInPlace(arr, startPoint, endPoint, animateArr) {\r\n    if (startPoint === endPoint) { return }\r\n    let middlePoint = Math.floor(startPoint + (endPoint - startPoint) / 2);\r\n    mergeSortInPlace(arr, startPoint, middlePoint, animateArr);\r\n    mergeSortInPlace(arr, middlePoint + 1, endPoint, animateArr);\r\n    merge(arr, startPoint, middlePoint, endPoint, animateArr)\r\n\r\n}\r\nfunction merge(arr, startPoint, midPoint, endPoint, animateArr) {\r\n    let start2 = midPoint + 1;\r\n    if (arr[midPoint] <= arr[start2]) return;\r\n    while (startPoint <= midPoint && start2 <= endPoint) {\r\n        if (arr[startPoint] <= arr[start2]) {\r\n            animateArr.push({\r\n                newArray: [...arr],\r\n                barCompare: [startPoint, start2]\r\n            })\r\n            startPoint++;\r\n        } else {\r\n            let tmpValue = arr[start2];\r\n            let index = start2;\r\n            while (index > startPoint) {\r\n                arr[index] = arr[index - 1];\r\n                index--;\r\n            }\r\n            arr[startPoint] = tmpValue;\r\n            animateArr.push({\r\n                newArray: [...arr],\r\n                barCompare: [startPoint, start2]\r\n            })\r\n            startPoint++;\r\n            start2++;\r\n            midPoint++;\r\n        }\r\n    }\r\n    while (startPoint <= midPoint) {\r\n        animateArr.push({\r\n            newArray: [...arr],\r\n            barCompare: [startPoint, start2-1]\r\n        })\r\n        startPoint++;\r\n    }\r\n    while (start2 <= endPoint) {\r\n        animateArr.push({\r\n            newArray: [...arr],\r\n            barCompare: [startPoint-1, start2]\r\n        });\r\n        start2++;\r\n    }\r\n\r\n}\r\n","export function quickSortAlgo(arr) {\r\n    const animateArr = [];\r\n    quickSortHelper(arr, 0, arr.length - 1, animateArr)\r\n    return animateArr;\r\n}\r\nfunction quickSortHelper(arr, startPoint, endPoint, animateArr) {\r\n    // console.log(arr);\r\n    if (startPoint === endPoint) {\r\n        animateArr.push(\r\n            {\r\n                state: 'finish',\r\n                newArray: [...arr],\r\n                runningPoint: null,\r\n                pivotPoint: null,\r\n                comparePoint: null,\r\n                finishPoint: startPoint\r\n            });\r\n            return;\r\n    }\r\n    let pivot = endPoint;\r\n    let runningPoint = startPoint;\r\n    // console.log(runningPoint);\r\n    for (let i = startPoint + 1; i <= endPoint; i++) {\r\n        if (i === endPoint && arr[runningPoint] <= arr[pivot] && runningPoint < endPoint - 1) {\r\n            runningPoint++;\r\n            let tmp = arr[pivot];\r\n            arr[pivot] = arr[runningPoint];\r\n            arr[runningPoint] = tmp;\r\n        } else if (i === endPoint && arr[runningPoint] <= arr[pivot] && runningPoint === endPoint - 1) {\r\n            runningPoint++;\r\n        } else if (i === endPoint && arr[runningPoint] > arr[pivot]) {\r\n            let tmp = arr[pivot];\r\n            arr[pivot] = arr[runningPoint];\r\n            arr[runningPoint] = tmp;\r\n        } else if (arr[i] <= arr[pivot]) {\r\n            let tmp = arr[i];\r\n            arr[i] = arr[runningPoint];\r\n            arr[runningPoint] = tmp;\r\n            runningPoint++;\r\n            if (runningPoint < i) {\r\n                i--;\r\n            };\r\n        }\r\n        animateArr.push(\r\n            {\r\n                state: 'partionning',\r\n                newArray: [...arr],\r\n                runningPoint: runningPoint,\r\n                pivotPoint: pivot,\r\n                comparePoint: i\r\n            })\r\n    }\r\n    animateArr.push(\r\n        {\r\n            state: 'partioned',\r\n            newArray: [...arr],\r\n            runningPoint: null,\r\n            pivotPoint: runningPoint,\r\n            comparePoint: null\r\n        });\r\n    console.log(runningPoint);\r\n    // console.log(arr);\r\n    // return\r\n    if (runningPoint > startPoint) {\r\n        quickSortHelper(arr, startPoint, runningPoint - 1, animateArr);\r\n    }\r\n    if (runningPoint < endPoint) {\r\n        quickSortHelper(arr, runningPoint + 1, endPoint, animateArr);\r\n    }\r\n}\r\n\r\n","export function heapSortAlgo(arr) {\r\n    const animateArr = [];\r\n    for (let i = Math.floor(arr.length / 2 - 1); i >= 0; i--) {\r\n        heapHelper(arr, i, arr.length, animateArr)\r\n    }\r\n    for (let n = arr.length - 1; n >= 0; n--) {\r\n        swap(arr, n, 0);\r\n        animateArr.push({\r\n            state: 'finish',\r\n            finish: n,\r\n            newArray: [...arr]\r\n        })\r\n        heapHelper(arr, 0, n, animateArr)\r\n    }\r\n    return animateArr;\r\n}\r\n\r\nfunction heapHelper(arr, i, lengthArray, animateArr) {\r\n    let leftPoint = 2 * i + 1;\r\n    let rightPoint = 2 * i + 2;\r\n    let largestPoint = i;\r\n    if (leftPoint < lengthArray && rightPoint < lengthArray) {\r\n        animateArr.push({\r\n            state: 'heapify',\r\n            comparePoint: [leftPoint, rightPoint],\r\n            largestPoint: largestPoint,\r\n            newArray: [...arr]\r\n        });\r\n    }\r\n    if (arr[leftPoint] > arr[largestPoint] && leftPoint < lengthArray) {\r\n        largestPoint = leftPoint;\r\n    }\r\n    if (arr[rightPoint] > arr[largestPoint] && rightPoint < lengthArray) {\r\n        largestPoint = rightPoint;\r\n    }\r\n    if (largestPoint !== i) {\r\n        swap(arr, i, largestPoint);\r\n        heapHelper(arr, largestPoint, lengthArray, animateArr);\r\n    }\r\n}\r\nfunction swap(arr, a, b) {\r\n    let temp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = temp;\r\n}","import React, { Component } from 'react';\r\nimport './SortingVisualize.css';\r\nimport { Link } from 'react-router-dom'\r\nimport { newBubbleSort as bubbleSort } from './Algorithm/BubbleSort';\r\nimport { selectionSortAlgo as selectionSort } from './Algorithm/SelectionSort'\r\nimport { mergeSortAlgo as mergeSort } from './Algorithm/MergeSort'\r\nimport { quickSortAlgo as quickSort } from './Algorithm/QuickSort'\r\nimport { heapSortAlgo as heapSort } from './Algorithm/HeapSort'\r\n\r\nclass sortingVisualizer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            windowWidth: 0,\r\n            limitBar : 0 ,\r\n            arrayNumber: [],\r\n            noBarCache: null,\r\n            numOfBar: 50,\r\n            algorithmName: null,\r\n            sortingAlgorithm: null,\r\n            speed: 60\r\n        }\r\n    }\r\n    componentDidMount = () => {\r\n        this.createArray(this.state.numOfBar);\r\n        const windowWidth = window.innerWidth;\r\n        const limitBar = Math.ceil((windowWidth/2.5)/50)*50\r\n        this.setState({\r\n            windowWidth: windowWidth,\r\n            limitBar: limitBar\r\n        })\r\n        \r\n    }\r\n    componentDidUpdate = () => {\r\n\r\n    }\r\n    createArray = (numOfBar) => {\r\n        const arr = [];\r\n        for (let i = 0; i < numOfBar; i++) {\r\n            let num = Math.floor(Math.random() * (500 - 10) + 10);\r\n            arr.push(num);\r\n        }\r\n        this.setState({ arrayNumber: arr });\r\n    }\r\n\r\n    createRandomArray = (e) => {\r\n        e.preventDefault()\r\n        const { numOfBar } = this.state;\r\n        this.createArray(numOfBar);\r\n        if (numOfBar !== null) {\r\n            for (let i = 0; i < numOfBar; i++) {\r\n                document.getElementById(`bar-${i}`).className = 'barChart';\r\n            }\r\n        }\r\n    }\r\n    visualizeBubbleSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        var animateArr = bubbleSort([...arrayNumber]);\r\n        let j = 0;\r\n        let tmp = arrayNumber.length - 1\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            if (i !== 0 && i % (tmp) === 0) {\r\n                j++;\r\n                tmp = tmp + arrayNumber.length - j;\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i][0]}`).className = 'barChart finished';\r\n                }, speed * i)\r\n            } else {\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i][0]}`).className = 'barChart compare';\r\n                    document.getElementById(`bar-${animateArr[i][1]}`).className = 'barChart compare';\r\n                    this.setState({ arrayNumber: animateArr[i][2] })\r\n                }, speed * i);\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i][0]}`).className = 'barChart';\r\n                    document.getElementById(`bar-${animateArr[i][1]}`).className = 'barChart';\r\n                }, speed * i + speed * 0.8)\r\n            }\r\n        }\r\n    }\r\n    visualizeSelectionSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        var animateArr = selectionSort([...arrayNumber]);\r\n        console.log(animateArr);\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            if (animateArr[i].state === 'done') {\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i].barDone}`).className = 'barChart finished';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray })\r\n                }, speed * i)\r\n            } else {\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i].barCompare[0]}`).className = 'barChart compare';\r\n                    document.getElementById(`bar-${animateArr[i].barCompare[1]}`).className = 'barChart compare';\r\n\r\n                }, speed * i);\r\n                setTimeout(() => {\r\n                    document.getElementById(`bar-${animateArr[i].barCompare[0]}`).className = 'barChart';\r\n                    document.getElementById(`bar-${animateArr[i].barCompare[1]}`).className = 'barChart';\r\n                }, speed * i + speed * 0.8)\r\n            }\r\n        }\r\n    }\r\n    visualizeMergeSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        var animateArr = mergeSort([...arrayNumber]);\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            setTimeout(() => {\r\n                document.getElementById(`bar-${animateArr[i].barCompare[0]}`).className = 'barChart compare';\r\n                document.getElementById(`bar-${animateArr[i].barCompare[1]}`).className = 'barChart compare';\r\n                this.setState({ arrayNumber: animateArr[i].newArray })\r\n            }, speed * i);\r\n            setTimeout(() => {\r\n                document.getElementById(`bar-${animateArr[i].barCompare[0]}`).className = 'barChart';\r\n                document.getElementById(`bar-${animateArr[i].barCompare[1]}`).className = 'barChart';\r\n            }, speed * i + speed * 0.8)\r\n        }\r\n    }\r\n    visualizeQuickSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        const animateArr = quickSort([...arrayNumber]);\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            setTimeout(() => {\r\n                if (animateArr[i].state === 'partionning') {\r\n                    document.getElementById(`bar-${animateArr[i].runningPoint}`).className = 'barChart compare';\r\n                    document.getElementById(`bar-${animateArr[i].pivotPoint}`).className = 'barChart pivot';\r\n                    document.getElementById(`bar-${animateArr[i].comparePoint}`).className = 'barChart compare';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray });\r\n                } else if (animateArr[i].state === 'partioned') {\r\n                    document.getElementById(`bar-${animateArr[i].pivotPoint}`).className = 'barChart finished'\r\n                }\r\n                else if (animateArr[i].state === 'finish') {\r\n                    document.getElementById(`bar-${animateArr[i].finishPoint}`).className = 'barChart finished'\r\n                }\r\n            }, speed * i);\r\n            setTimeout(() => {\r\n                if (animateArr[i].state === 'partionning') {\r\n                    document.getElementById(`bar-${animateArr[i].runningPoint}`).className = 'barChart';\r\n                    document.getElementById(`bar-${animateArr[i].comparePoint}`).className = 'barChart';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray });\r\n                }\r\n            }, speed * i + speed * 0.8);\r\n\r\n        }\r\n    }\r\n    visualizeHeapSort = () => {\r\n        const { arrayNumber, speed } = this.state;\r\n        const animateArr = heapSort([...arrayNumber]);\r\n        console.log(animateArr);\r\n        for (let i = 0; i < animateArr.length; i++) {\r\n            setTimeout(() => {\r\n                if (animateArr[i].state === 'finish') {\r\n                    document.getElementById(`bar-${animateArr[i].finish}`).className = 'barChart finished';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray });\r\n                } else if (animateArr[i].state === 'heapify') {\r\n                    document.getElementById(`bar-${animateArr[i].largestPoint}`).className = 'barChart pivot';\r\n                    document.getElementById(`bar-${animateArr[i].comparePoint[0]}`).className = 'barChart compare';\r\n                    document.getElementById(`bar-${animateArr[i].comparePoint[1]}`).className = 'barChart compare';\r\n                    this.setState({ arrayNumber: animateArr[i].newArray });\r\n                    setTimeout(() => {\r\n                        document.getElementById(`bar-${animateArr[i].largestPoint}`).className = 'barChart';\r\n                        document.getElementById(`bar-${animateArr[i].comparePoint[0]}`).className = 'barChart';\r\n                        document.getElementById(`bar-${animateArr[i].comparePoint[1]}`).className = 'barChart';\r\n                    }, speed * 0.6)\r\n                }\r\n            }, speed * i);\r\n        }\r\n    }\r\n\r\n    selectAlgo = (e) => {\r\n        e.preventDefault();\r\n        this.setState({ sortingAlgorithm: e.target.name });\r\n        this.setState({ algorithmName: e.target.text })\r\n    }\r\n    startSorting = (e) => {\r\n        if (window.innerWidth < 1250) {\r\n            e.preventDefault();\r\n        }\r\n        const { sortingAlgorithm } = this.state;\r\n        switch (sortingAlgorithm) {\r\n            case 'QuickSort':\r\n                this.visualizeQuickSort();\r\n                break;\r\n            case 'BubbleSort':\r\n                this.visualizeBubbleSort();\r\n                break;\r\n            case 'SelectionSort':\r\n                this.visualizeSelectionSort();\r\n                break;\r\n            case 'HeapSort':\r\n                this.visualizeHeapSort();\r\n                break;\r\n            case 'MergeSort':\r\n                this.visualizeMergeSort();\r\n                break;\r\n            default:\r\n                alert('Please select Algorithm');\r\n        }\r\n    }\r\n    selectSpeed = (e) => {\r\n        e.preventDefault()\r\n        const { name } = e.target\r\n        switch (name) {\r\n            case 'fast':\r\n                this.setState({ speed: 30 });\r\n                break;\r\n            case 'medium':\r\n                this.setState({ speed: 60 });\r\n                break;\r\n            case 'slow':\r\n                this.setState({ speed: 100 });\r\n                break;\r\n        }\r\n    }\r\n    handleOnChange = (e) => {\r\n        this.setState({ noBarCache: e.target.value })\r\n    }\r\n    setNumOfBar = (e) => {\r\n        e.preventDefault();\r\n        const { noBarCache, limitBar } = this.state\r\n        if (noBarCache == null || noBarCache == 0) {\r\n            alert(\"Please insert number of Bar !\")\r\n            return\r\n        }\r\n        if (noBarCache > limitBar) {\r\n            alert(`Number of Bars must less than ${limitBar}`)\r\n            return\r\n        }\r\n        this.setState({ numOfBar: noBarCache });\r\n        this.createArray(noBarCache);\r\n    }\r\n    render() {\r\n\r\n        const { arrayNumber, numOfBar, algorithmName, windowWidth } = this.state;\r\n        return (\r\n            <div className=\"SortingVisualizer\">\r\n                <nav className=\"navbar navbar-inverse\">\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"navbar-header\">\r\n                            <Link className=\"navbar-brand\" to='/'>Home</Link>\r\n                            <Link className=\"navbar-brand\" to=\"/PathFinding\">PathFinding Visualizer</Link>\r\n                            <button type=\"button\" className=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavBar\">\r\n                                <span className=\"icon-bar\"></span>\r\n                                <span className=\"icon-bar\"></span>\r\n                                <span className=\"icon-bar\"></span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"collapse navbar-collapse\" id=\"myNavBar\">\r\n                            <ul className=\"nav navbar-nav\">\r\n                                <li className=\"nav-item dropdown\">\r\n                                    <a className=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">Algorithms<span className=\"caret\"></span></a>\r\n                                    <ul className=\"dropdown-menu\" id=\"AlgorithmList\">\r\n                                        <li><a className=\"dropdown-item\" onClick={this.selectAlgo} name=\"BubbleSort\" href=\"#\">Bubble Sort</a></li>\r\n                                        <li><a className=\"dropdown-item\" onClick={this.selectAlgo} name=\"SelectionSort\" href=\"#\">Selection Sort</a></li>\r\n                                        <li><a className=\"dropdown-item\" onClick={this.selectAlgo} name=\"HeapSort\" href=\"#\">Heap Sort</a></li>\r\n                                        <li><a className=\"dropdown-item\" onClick={this.selectAlgo} name=\"MergeSort\" href=\"#\">Merge Sort</a></li>\r\n                                        <li><a className=\"dropdown-item\" onClick={this.selectAlgo} name=\"QuickSort\" href=\"#\">Quick Sort</a></li>\r\n                                    </ul>\r\n                                </li>\r\n                                <li className=\"nav-item main-btn\" >\r\n                                    <a onClick={this.startSorting} data-toggle=\"collapse\" href={window.innerWidth < 1250 ? \"#myNavBar\" : \"#\"}>{algorithmName != null ? algorithmName : \"Please select algorithm\"}</a>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <a className=\"dropdow-toggle\" data-toggle=\"dropdown\" href=\"#\">Speed <span className=\"caret\"></span></a>\r\n                                    <ul className=\"dropdown-menu\">\r\n                                        <li><a className=\"dropdow-item\" onClick={this.selectSpeed} name='fast' href=\"#\">Fast</a></li>\r\n                                        <li><a className=\"dropdow-item\" onClick={this.selectSpeed} name='medium' href=\"#\">Medium</a></li>\r\n                                        <li><a className=\"dropdow-item\" onClick={this.selectSpeed} name='slow' href=\"#\">Slow</a></li>\r\n                                    </ul>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <a onClick={this.createRandomArray} href=\"#\">Create Random Array</a>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <form onSubmit={this.setNumOfBar} className=\"navbar-form navbar-left\" role=\"search\">\r\n                                        <div className=\"form-group\">\r\n                                            <input className=\"form-control\" type=\"text\" placeholder=\"Number of Bars\" name=\"numOfBar\" onChange={this.handleOnChange} />\r\n                                        </div>\r\n                                        <button type=\"submit\" className=\"btn btn-default ml-5\"> Send!</button>\r\n                                    </form>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n\r\n                <div className=\"listBarChart\">\r\n                    {arrayNumber.map((bar, barIdx) => {\r\n                        return (\r\n                            <div key={barIdx} id={`bar-${barIdx}`} className=\"barChart\" style={{ width: ((windowWidth-50) / numOfBar), height: (bar / 500) * (window.innerHeight - 100), }}></div>\r\n                        )\r\n                    })\r\n                    }\r\n                </div>\r\n            </div >\r\n        );\r\n    };\r\n}\r\nexport default sortingVisualizer;\r\n\r\n","export function newBubbleSort(arr) {\r\n    const animateArr = [];\r\n    for (let i = arr.length-1; i >= 0; i--) {\r\n        for (let j = 0; j < i; j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n                let tmp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = tmp;\r\n            }\r\n            animateArr.push([j,j+1,[...arr]])\r\n        }\r\n        animateArr.push([i, [...arr]])\r\n    }\r\n    return animateArr;\r\n}","export function selectionSortAlgo(arr){\r\n    const animateArr = [];\r\n    for(let i=0; i<arr.length; i++){\r\n        let minIdx = i;\r\n        for(let j=i; j<arr.length; j++){\r\n            if(arr[j]<arr[minIdx]){\r\n                minIdx = j;\r\n            }\r\n            animateArr.push({\r\n                state: 'compare',\r\n                barCompare: [minIdx, j] \r\n            })\r\n        }\r\n        let tmp = arr[i];\r\n        arr[i]= arr[minIdx];\r\n        arr[minIdx] = tmp;\r\n        animateArr.push({\r\n            state: 'done',\r\n            barDone: i,\r\n            newArray: [...arr]\r\n        })\r\n    }\r\n    return animateArr;\r\n\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Route, Link, Switch } from 'react-router-dom';\r\nimport PathFinding from './pathFinding/PathFinding';\r\nimport Sorting from './SortingVisualize/SortingVisualizer'\r\n\r\nconst BASE_ROUTE = ''\r\nconst NavBar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-inverse\">\r\n      <div className=\"container-fluid\">\r\n        <div className=\"Header\">\r\n          <a className=\"navbar-brand\" href='/'>Algorithms Visualizer</a>\r\n        </div>\r\n        <div className=\"myNavBar\">\r\n          <ul className=\"nav navbar-nav\">\r\n            <li>\r\n              <Link to='/PathFinding'>PathFinding Visualizer </Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/SortingVisualizer'>Sorting Visualizer</Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path={`${BASE_ROUTE}/`} component={NavBar} />\r\n          <Route exact path={`${BASE_ROUTE}/PathFinding`} component={PathFinding} />\r\n          <Route exact path={`${BASE_ROUTE}/SortingVisualizer`} component={Sorting} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter as Router } from 'react-router-dom'\r\n\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>\r\n    ,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}